
bin\Debug\kraanfinal.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800200  000016c2  00001776  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000016c2  00000000  00000000  000000b4  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000050  00800200  00800200  00001776  2**0
                  ALLOC
  3 .fuse         00000003  00820000  00820000  00001776  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  4 .comment      00000012  00000000  00000000  00001779  2**0
                  CONTENTS, READONLY
  5 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  0000178c  2**2
                  CONTENTS, READONLY, OCTETS
  6 .debug_aranges 00000178  00000000  00000000  000017d0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
  7 .debug_info   000015e9  00000000  00000000  00001948  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
  8 .debug_abbrev 000010c9  00000000  00000000  00002f31  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
  9 .debug_line   00001287  00000000  00000000  00003ffa  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 10 .debug_frame  0000042c  00000000  00000000  00005284  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_str    0000071e  00000000  00000000  000056b0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_line_str 000001fa  00000000  00000000  00005dce  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 72 00 	jmp	0xe4	; 0xe4 <__ctors_end>
       4:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
       8:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
       c:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
      10:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
      14:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
      18:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
      1c:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
      20:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
      24:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
      28:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
      2c:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
      30:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
      34:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
      38:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
      3c:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
      40:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
      44:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
      48:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
      4c:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
      50:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
      54:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
      58:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
      5c:	0c 94 2f 03 	jmp	0x65e	; 0x65e <__vector_23>
      60:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
      64:	0c 94 1b 09 	jmp	0x1236	; 0x1236 <__vector_25>
      68:	0c 94 cb 08 	jmp	0x1196	; 0x1196 <__vector_26>
      6c:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
      70:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
      74:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
      78:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
      7c:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
      80:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
      84:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
      88:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
      8c:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
      90:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
      94:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
      98:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
      9c:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
      a0:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
      a4:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
      a8:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
      ac:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
      b0:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
      b4:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
      b8:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
      bc:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
      c0:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
      c4:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
      c8:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
      cc:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
      d0:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
      d4:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
      d8:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
      dc:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
      e0:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>

000000e4 <__ctors_end>:
      e4:	11 24       	eor	r1, r1
      e6:	1f be       	out	0x3f, r1	; 63
      e8:	cf ef       	ldi	r28, 0xFF	; 255
      ea:	d1 e2       	ldi	r29, 0x21	; 33
      ec:	de bf       	out	0x3e, r29	; 62
      ee:	cd bf       	out	0x3d, r28	; 61
      f0:	00 e0       	ldi	r16, 0x00	; 0
      f2:	0c bf       	out	0x3c, r16	; 60

000000f4 <__do_clear_bss>:
      f4:	22 e0       	ldi	r18, 0x02	; 2

000000f6 <.Loc.1>:
      f6:	a0 e0       	ldi	r26, 0x00	; 0

000000f8 <.Loc.2>:
      f8:	b2 e0       	ldi	r27, 0x02	; 2

000000fa <.Loc.3>:
      fa:	01 c0       	rjmp	.+2      	; 0xfe <.Loc.5>

000000fc <.Loc.4>:
      fc:	1d 92       	st	X+, r1

000000fe <.Loc.5>:
      fe:	a0 35       	cpi	r26, 0x50	; 80

00000100 <.Loc.6>:
     100:	b2 07       	cpc	r27, r18

00000102 <.Loc.7>:
     102:	e1 f7       	brne	.-8      	; 0xfc <.Loc.4>

00000104 <L0^A>:
     104:	0e 94 79 07 	call	0xef2	; 0xef2 <main>
     108:	0c 94 5f 0b 	jmp	0x16be	; 0x16be <_exit>

0000010c <__bad_interrupt>:
     10c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000110 <init_io>:
#include <avr/io.h>
#include "clock.h"

void init_io(void)
{
     110:	cf 93       	push	r28
     112:	df 93       	push	r29
     114:	cd b7       	in	r28, 0x3d	; 61
     116:	de b7       	in	r29, 0x3e	; 62

00000118 <.Loc.1>:
    DDRF &= ~((1<<PF0)|(1<<PF1));
     118:	80 e3       	ldi	r24, 0x30	; 48
     11a:	90 e0       	ldi	r25, 0x00	; 0
     11c:	fc 01       	movw	r30, r24
     11e:	20 81       	ld	r18, Z

00000120 <.Loc.2>:
     120:	80 e3       	ldi	r24, 0x30	; 48
     122:	90 e0       	ldi	r25, 0x00	; 0

00000124 <.Loc.3>:
     124:	2c 7f       	andi	r18, 0xFC	; 252
     126:	fc 01       	movw	r30, r24
     128:	20 83       	st	Z, r18

0000012a <.Loc.4>:
    PORTF |= (1<<PF0) | (1<<PF1);
     12a:	81 e3       	ldi	r24, 0x31	; 49
     12c:	90 e0       	ldi	r25, 0x00	; 0
     12e:	fc 01       	movw	r30, r24
     130:	20 81       	ld	r18, Z
     132:	81 e3       	ldi	r24, 0x31	; 49
     134:	90 e0       	ldi	r25, 0x00	; 0

00000136 <.Loc.5>:
     136:	23 60       	ori	r18, 0x03	; 3
     138:	fc 01       	movw	r30, r24
     13a:	20 83       	st	Z, r18

0000013c <.Loc.6>:
    DDRB |= (1<<PB0) | (1<<PB1);
     13c:	84 e2       	ldi	r24, 0x24	; 36
     13e:	90 e0       	ldi	r25, 0x00	; 0
     140:	fc 01       	movw	r30, r24
     142:	20 81       	ld	r18, Z
     144:	84 e2       	ldi	r24, 0x24	; 36
     146:	90 e0       	ldi	r25, 0x00	; 0

00000148 <.Loc.7>:
     148:	23 60       	ori	r18, 0x03	; 3
     14a:	fc 01       	movw	r30, r24
     14c:	20 83       	st	Z, r18

0000014e <.Loc.8>:
}
     14e:	00 00       	nop
     150:	df 91       	pop	r29
     152:	cf 91       	pop	r28
     154:	08 95       	ret

00000156 <bio_kraan_enable>:

int bio_kraan_enable(int mode){//0 = return value, 1 = flip value, 2=checkpin
     156:	2f 92       	push	r2
     158:	3f 92       	push	r3
     15a:	4f 92       	push	r4
     15c:	5f 92       	push	r5
     15e:	6f 92       	push	r6
     160:	7f 92       	push	r7
     162:	8f 92       	push	r8
     164:	9f 92       	push	r9
     166:	af 92       	push	r10
     168:	bf 92       	push	r11
     16a:	cf 92       	push	r12
     16c:	df 92       	push	r13
     16e:	ef 92       	push	r14
     170:	ff 92       	push	r15
     172:	0f 93       	push	r16
     174:	1f 93       	push	r17
     176:	cf 93       	push	r28
     178:	df 93       	push	r29
     17a:	00 d0       	rcall	.+0      	; 0x17c <L0^A>

0000017c <L0^A>:
     17c:	00 d0       	rcall	.+0      	; 0x17e <L0^A>

0000017e <L0^A>:
     17e:	00 d0       	rcall	.+0      	; 0x180 <L0^A>

00000180 <L0^A>:
     180:	0f 92       	push	r0
     182:	cd b7       	in	r28, 0x3d	; 61
     184:	de b7       	in	r29, 0x3e	; 62
     186:	9a 83       	std	Y+2, r25	; 0x02
     188:	89 83       	std	Y+1, r24	; 0x01

0000018a <.Loc.10>:
    static int kraan_enable = 0;
    static unsigned long long int last_press_time = 0;
    if(mode == 1){
     18a:	89 81       	ldd	r24, Y+1	; 0x01
     18c:	9a 81       	ldd	r25, Y+2	; 0x02
     18e:	81 30       	cpi	r24, 0x01	; 1
     190:	91 05       	cpc	r25, r1
     192:	79 f4       	brne	.+30     	; 0x1b2 <.L3>

00000194 <.Loc.11>:
        kraan_enable = !kraan_enable;
     194:	80 91 00 02 	lds	r24, 0x0200	; 0x800200 <kraan_enable.3>
     198:	90 91 01 02 	lds	r25, 0x0201	; 0x800201 <kraan_enable.3+0x1>
     19c:	21 e0       	ldi	r18, 0x01	; 1
     19e:	00 97       	sbiw	r24, 0x00	; 0
     1a0:	09 f0       	breq	.+2      	; 0x1a4 <.L4>
     1a2:	20 e0       	ldi	r18, 0x00	; 0

000001a4 <.L4>:
     1a4:	82 2f       	mov	r24, r18
     1a6:	90 e0       	ldi	r25, 0x00	; 0

000001a8 <.Loc.12>:
     1a8:	90 93 01 02 	sts	0x0201, r25	; 0x800201 <kraan_enable.3+0x1>
     1ac:	80 93 00 02 	sts	0x0200, r24	; 0x800200 <kraan_enable.3>
     1b0:	90 c0       	rjmp	.+288    	; 0x2d2 <.L5>

000001b2 <.L3>:
    }
    else if(mode == 2){
     1b2:	89 81       	ldd	r24, Y+1	; 0x01
     1b4:	9a 81       	ldd	r25, Y+2	; 0x02
     1b6:	82 30       	cpi	r24, 0x02	; 2
     1b8:	91 05       	cpc	r25, r1
     1ba:	09 f0       	breq	.+2      	; 0x1be <.Loc.14>

000001bc <L0^A>:
     1bc:	8a c0       	rjmp	.+276    	; 0x2d2 <.L5>

000001be <.Loc.14>:
        if(time_current_ms(0)-last_press_time >200){
     1be:	80 e0       	ldi	r24, 0x00	; 0
     1c0:	90 e0       	ldi	r25, 0x00	; 0
     1c2:	0e 94 c5 02 	call	0x58a	; 0x58a <time_current_ms>
     1c6:	5c 01       	movw	r10, r24
     1c8:	89 2f       	mov	r24, r25
     1ca:	88 0f       	add	r24, r24
     1cc:	88 0b       	sbc	r24, r24
     1ce:	c8 2e       	mov	r12, r24
     1d0:	d8 2e       	mov	r13, r24
     1d2:	e8 2e       	mov	r14, r24
     1d4:	f8 2e       	mov	r15, r24
     1d6:	08 2f       	mov	r16, r24
     1d8:	18 2f       	mov	r17, r24

000001da <.Loc.15>:
     1da:	20 90 02 02 	lds	r2, 0x0202	; 0x800202 <last_press_time.2>
     1de:	30 90 03 02 	lds	r3, 0x0203	; 0x800203 <last_press_time.2+0x1>
     1e2:	40 90 04 02 	lds	r4, 0x0204	; 0x800204 <last_press_time.2+0x2>
     1e6:	50 90 05 02 	lds	r5, 0x0205	; 0x800205 <last_press_time.2+0x3>
     1ea:	60 90 06 02 	lds	r6, 0x0206	; 0x800206 <last_press_time.2+0x4>
     1ee:	70 90 07 02 	lds	r7, 0x0207	; 0x800207 <last_press_time.2+0x5>
     1f2:	80 90 08 02 	lds	r8, 0x0208	; 0x800208 <last_press_time.2+0x6>
     1f6:	90 90 09 02 	lds	r9, 0x0209	; 0x800209 <last_press_time.2+0x7>
     1fa:	2a 2d       	mov	r18, r10
     1fc:	3b 2d       	mov	r19, r11
     1fe:	4c 2d       	mov	r20, r12
     200:	5d 2d       	mov	r21, r13
     202:	6e 2d       	mov	r22, r14
     204:	7f 2d       	mov	r23, r15
     206:	80 2f       	mov	r24, r16
     208:	91 2f       	mov	r25, r17
     20a:	a2 2c       	mov	r10, r2
     20c:	b3 2c       	mov	r11, r3
     20e:	c4 2c       	mov	r12, r4
     210:	d5 2c       	mov	r13, r5
     212:	e6 2c       	mov	r14, r6
     214:	f7 2c       	mov	r15, r7
     216:	08 2d       	mov	r16, r8
     218:	19 2d       	mov	r17, r9
     21a:	0e 94 27 0a 	call	0x144e	; 0x144e <__subdi3>
     21e:	82 2e       	mov	r8, r18
     220:	93 2e       	mov	r9, r19
     222:	a4 2e       	mov	r10, r20
     224:	b5 2e       	mov	r11, r21
     226:	c6 2e       	mov	r12, r22
     228:	d7 2e       	mov	r13, r23
     22a:	e8 2e       	mov	r14, r24
     22c:	f9 2e       	mov	r15, r25

0000022e <.Loc.16>:
     22e:	28 2d       	mov	r18, r8
     230:	39 2d       	mov	r19, r9
     232:	4a 2d       	mov	r20, r10
     234:	5b 2d       	mov	r21, r11
     236:	6c 2d       	mov	r22, r12
     238:	7d 2d       	mov	r23, r13
     23a:	8e 2d       	mov	r24, r14
     23c:	9f 2d       	mov	r25, r15
     23e:	28 3c       	cpi	r18, 0xC8	; 200
     240:	31 05       	cpc	r19, r1
     242:	41 05       	cpc	r20, r1
     244:	51 05       	cpc	r21, r1
     246:	61 05       	cpc	r22, r1
     248:	71 05       	cpc	r23, r1
     24a:	81 05       	cpc	r24, r1
     24c:	91 05       	cpc	r25, r1
     24e:	09 f0       	breq	.+2      	; 0x252 <L0^A>

00000250 <L0^A>:
     250:	08 f4       	brcc	.+2      	; 0x254 <.Loc.17>

00000252 <L0^A>:
     252:	3f c0       	rjmp	.+126    	; 0x2d2 <.L5>

00000254 <.Loc.17>:
            if((PINF&(1<<PF0))== 0){ //statement die knop uitleest
     254:	8f e2       	ldi	r24, 0x2F	; 47
     256:	90 e0       	ldi	r25, 0x00	; 0
     258:	fc 01       	movw	r30, r24
     25a:	80 81       	ld	r24, Z

0000025c <.Loc.18>:
     25c:	88 2f       	mov	r24, r24
     25e:	90 e0       	ldi	r25, 0x00	; 0
     260:	81 70       	andi	r24, 0x01	; 1
     262:	99 27       	eor	r25, r25

00000264 <.Loc.19>:
     264:	00 97       	sbiw	r24, 0x00	; 0
     266:	a9 f5       	brne	.+106    	; 0x2d2 <.L5>

00000268 <.Loc.20>:
                kraan_enable = !kraan_enable;
     268:	80 91 00 02 	lds	r24, 0x0200	; 0x800200 <kraan_enable.3>
     26c:	90 91 01 02 	lds	r25, 0x0201	; 0x800201 <kraan_enable.3+0x1>
     270:	21 e0       	ldi	r18, 0x01	; 1
     272:	00 97       	sbiw	r24, 0x00	; 0
     274:	09 f0       	breq	.+2      	; 0x278 <.L6>
     276:	20 e0       	ldi	r18, 0x00	; 0

00000278 <.L6>:
     278:	82 2f       	mov	r24, r18
     27a:	90 e0       	ldi	r25, 0x00	; 0

0000027c <.Loc.21>:
     27c:	90 93 01 02 	sts	0x0201, r25	; 0x800201 <kraan_enable.3+0x1>
     280:	80 93 00 02 	sts	0x0200, r24	; 0x800200 <kraan_enable.3>

00000284 <.Loc.22>:
                last_press_time = time_current_ms(0);
     284:	80 e0       	ldi	r24, 0x00	; 0
     286:	90 e0       	ldi	r25, 0x00	; 0
     288:	0e 94 c5 02 	call	0x58a	; 0x58a <time_current_ms>
     28c:	9c 83       	std	Y+4, r25	; 0x04
     28e:	8b 83       	std	Y+3, r24	; 0x03
     290:	89 2f       	mov	r24, r25
     292:	88 0f       	add	r24, r24
     294:	88 0b       	sbc	r24, r24
     296:	8d 83       	std	Y+5, r24	; 0x05
     298:	8e 83       	std	Y+6, r24	; 0x06
     29a:	8f 83       	std	Y+7, r24	; 0x07
     29c:	88 87       	std	Y+8, r24	; 0x08
     29e:	89 87       	std	Y+9, r24	; 0x09
     2a0:	8a 87       	std	Y+10, r24	; 0x0a

000002a2 <.Loc.23>:
     2a2:	fb 81       	ldd	r31, Y+3	; 0x03
     2a4:	f0 93 02 02 	sts	0x0202, r31	; 0x800202 <last_press_time.2>
     2a8:	8c 81       	ldd	r24, Y+4	; 0x04
     2aa:	80 93 03 02 	sts	0x0203, r24	; 0x800203 <last_press_time.2+0x1>
     2ae:	ed 81       	ldd	r30, Y+5	; 0x05
     2b0:	e0 93 04 02 	sts	0x0204, r30	; 0x800204 <last_press_time.2+0x2>
     2b4:	fe 81       	ldd	r31, Y+6	; 0x06
     2b6:	f0 93 05 02 	sts	0x0205, r31	; 0x800205 <last_press_time.2+0x3>
     2ba:	8f 81       	ldd	r24, Y+7	; 0x07
     2bc:	80 93 06 02 	sts	0x0206, r24	; 0x800206 <last_press_time.2+0x4>
     2c0:	e8 85       	ldd	r30, Y+8	; 0x08
     2c2:	e0 93 07 02 	sts	0x0207, r30	; 0x800207 <last_press_time.2+0x5>
     2c6:	f9 85       	ldd	r31, Y+9	; 0x09
     2c8:	f0 93 08 02 	sts	0x0208, r31	; 0x800208 <last_press_time.2+0x6>
     2cc:	8a 85       	ldd	r24, Y+10	; 0x0a
     2ce:	80 93 09 02 	sts	0x0209, r24	; 0x800209 <last_press_time.2+0x7>

000002d2 <.L5>:
            }
        }
    }
    if(kraan_enable)
     2d2:	80 91 00 02 	lds	r24, 0x0200	; 0x800200 <kraan_enable.3>
     2d6:	90 91 01 02 	lds	r25, 0x0201	; 0x800201 <kraan_enable.3+0x1>

000002da <.Loc.25>:
     2da:	00 97       	sbiw	r24, 0x00	; 0
     2dc:	51 f0       	breq	.+20     	; 0x2f2 <.L7>

000002de <.Loc.26>:
    {
        PORTB &= ~(1<<PB0);
     2de:	85 e2       	ldi	r24, 0x25	; 37
     2e0:	90 e0       	ldi	r25, 0x00	; 0
     2e2:	fc 01       	movw	r30, r24
     2e4:	20 81       	ld	r18, Z

000002e6 <.Loc.27>:
     2e6:	85 e2       	ldi	r24, 0x25	; 37
     2e8:	90 e0       	ldi	r25, 0x00	; 0

000002ea <.Loc.28>:
     2ea:	2e 7f       	andi	r18, 0xFE	; 254
     2ec:	fc 01       	movw	r30, r24
     2ee:	20 83       	st	Z, r18
     2f0:	09 c0       	rjmp	.+18     	; 0x304 <.L8>

000002f2 <.L7>:
    }
    else
    {
        PORTB |= (1<<PB0);
     2f2:	85 e2       	ldi	r24, 0x25	; 37
     2f4:	90 e0       	ldi	r25, 0x00	; 0
     2f6:	fc 01       	movw	r30, r24
     2f8:	20 81       	ld	r18, Z
     2fa:	85 e2       	ldi	r24, 0x25	; 37
     2fc:	90 e0       	ldi	r25, 0x00	; 0

000002fe <.Loc.30>:
     2fe:	21 60       	ori	r18, 0x01	; 1
     300:	fc 01       	movw	r30, r24
     302:	20 83       	st	Z, r18

00000304 <.L8>:
    }
    return(kraan_enable);
     304:	80 91 00 02 	lds	r24, 0x0200	; 0x800200 <kraan_enable.3>
     308:	90 91 01 02 	lds	r25, 0x0201	; 0x800201 <kraan_enable.3+0x1>

0000030c <.Loc.32>:
}
     30c:	2a 96       	adiw	r28, 0x0a	; 10
     30e:	0f b6       	in	r0, 0x3f	; 63
     310:	f8 94       	cli
     312:	de bf       	out	0x3e, r29	; 62
     314:	0f be       	out	0x3f, r0	; 63
     316:	cd bf       	out	0x3d, r28	; 61
     318:	df 91       	pop	r29
     31a:	cf 91       	pop	r28
     31c:	1f 91       	pop	r17
     31e:	0f 91       	pop	r16
     320:	ff 90       	pop	r15
     322:	ef 90       	pop	r14
     324:	df 90       	pop	r13
     326:	cf 90       	pop	r12
     328:	bf 90       	pop	r11
     32a:	af 90       	pop	r10
     32c:	9f 90       	pop	r9
     32e:	8f 90       	pop	r8
     330:	7f 90       	pop	r7
     332:	6f 90       	pop	r6
     334:	5f 90       	pop	r5
     336:	4f 90       	pop	r4
     338:	3f 90       	pop	r3
     33a:	2f 90       	pop	r2
     33c:	08 95       	ret

0000033e <bio_kraan_load_unload>:

int bio_kraan_load_unload(int mode){//0 = return value, 1 = flip value, 2=checkpin
     33e:	2f 92       	push	r2
     340:	3f 92       	push	r3
     342:	4f 92       	push	r4
     344:	5f 92       	push	r5
     346:	6f 92       	push	r6
     348:	7f 92       	push	r7
     34a:	8f 92       	push	r8
     34c:	9f 92       	push	r9
     34e:	af 92       	push	r10
     350:	bf 92       	push	r11
     352:	cf 92       	push	r12
     354:	df 92       	push	r13
     356:	ef 92       	push	r14
     358:	ff 92       	push	r15
     35a:	0f 93       	push	r16
     35c:	1f 93       	push	r17
     35e:	cf 93       	push	r28
     360:	df 93       	push	r29
     362:	00 d0       	rcall	.+0      	; 0x364 <L0^A>

00000364 <L0^A>:
     364:	00 d0       	rcall	.+0      	; 0x366 <L0^A>

00000366 <L0^A>:
     366:	00 d0       	rcall	.+0      	; 0x368 <L0^A>

00000368 <L0^A>:
     368:	0f 92       	push	r0
     36a:	cd b7       	in	r28, 0x3d	; 61
     36c:	de b7       	in	r29, 0x3e	; 62
     36e:	9a 83       	std	Y+2, r25	; 0x02
     370:	89 83       	std	Y+1, r24	; 0x01

00000372 <.Loc.34>:
    static int load_unload_status = 0;
    static unsigned long long int last_press_time = 0;
    if(mode == 1){
     372:	89 81       	ldd	r24, Y+1	; 0x01
     374:	9a 81       	ldd	r25, Y+2	; 0x02
     376:	81 30       	cpi	r24, 0x01	; 1
     378:	91 05       	cpc	r25, r1
     37a:	79 f4       	brne	.+30     	; 0x39a <.L11>

0000037c <.Loc.35>:
        load_unload_status = !load_unload_status;
     37c:	80 91 0a 02 	lds	r24, 0x020A	; 0x80020a <load_unload_status.1>
     380:	90 91 0b 02 	lds	r25, 0x020B	; 0x80020b <load_unload_status.1+0x1>
     384:	21 e0       	ldi	r18, 0x01	; 1
     386:	00 97       	sbiw	r24, 0x00	; 0
     388:	09 f0       	breq	.+2      	; 0x38c <.L12>
     38a:	20 e0       	ldi	r18, 0x00	; 0

0000038c <.L12>:
     38c:	82 2f       	mov	r24, r18
     38e:	90 e0       	ldi	r25, 0x00	; 0

00000390 <.Loc.36>:
     390:	90 93 0b 02 	sts	0x020B, r25	; 0x80020b <load_unload_status.1+0x1>
     394:	80 93 0a 02 	sts	0x020A, r24	; 0x80020a <load_unload_status.1>
     398:	90 c0       	rjmp	.+288    	; 0x4ba <.L13>

0000039a <.L11>:
    }
    else if(mode == 2){
     39a:	89 81       	ldd	r24, Y+1	; 0x01
     39c:	9a 81       	ldd	r25, Y+2	; 0x02
     39e:	82 30       	cpi	r24, 0x02	; 2
     3a0:	91 05       	cpc	r25, r1
     3a2:	09 f0       	breq	.+2      	; 0x3a6 <.Loc.38>

000003a4 <L0^A>:
     3a4:	8a c0       	rjmp	.+276    	; 0x4ba <.L13>

000003a6 <.Loc.38>:
        if(time_current_ms(0)-last_press_time >200){
     3a6:	80 e0       	ldi	r24, 0x00	; 0
     3a8:	90 e0       	ldi	r25, 0x00	; 0
     3aa:	0e 94 c5 02 	call	0x58a	; 0x58a <time_current_ms>
     3ae:	5c 01       	movw	r10, r24
     3b0:	89 2f       	mov	r24, r25
     3b2:	88 0f       	add	r24, r24
     3b4:	88 0b       	sbc	r24, r24
     3b6:	c8 2e       	mov	r12, r24
     3b8:	d8 2e       	mov	r13, r24
     3ba:	e8 2e       	mov	r14, r24
     3bc:	f8 2e       	mov	r15, r24
     3be:	08 2f       	mov	r16, r24
     3c0:	18 2f       	mov	r17, r24

000003c2 <.Loc.39>:
     3c2:	20 90 0c 02 	lds	r2, 0x020C	; 0x80020c <last_press_time.0>
     3c6:	30 90 0d 02 	lds	r3, 0x020D	; 0x80020d <last_press_time.0+0x1>
     3ca:	40 90 0e 02 	lds	r4, 0x020E	; 0x80020e <last_press_time.0+0x2>
     3ce:	50 90 0f 02 	lds	r5, 0x020F	; 0x80020f <last_press_time.0+0x3>
     3d2:	60 90 10 02 	lds	r6, 0x0210	; 0x800210 <last_press_time.0+0x4>
     3d6:	70 90 11 02 	lds	r7, 0x0211	; 0x800211 <last_press_time.0+0x5>
     3da:	80 90 12 02 	lds	r8, 0x0212	; 0x800212 <last_press_time.0+0x6>
     3de:	90 90 13 02 	lds	r9, 0x0213	; 0x800213 <last_press_time.0+0x7>
     3e2:	2a 2d       	mov	r18, r10
     3e4:	3b 2d       	mov	r19, r11
     3e6:	4c 2d       	mov	r20, r12
     3e8:	5d 2d       	mov	r21, r13
     3ea:	6e 2d       	mov	r22, r14
     3ec:	7f 2d       	mov	r23, r15
     3ee:	80 2f       	mov	r24, r16
     3f0:	91 2f       	mov	r25, r17
     3f2:	a2 2c       	mov	r10, r2
     3f4:	b3 2c       	mov	r11, r3
     3f6:	c4 2c       	mov	r12, r4
     3f8:	d5 2c       	mov	r13, r5
     3fa:	e6 2c       	mov	r14, r6
     3fc:	f7 2c       	mov	r15, r7
     3fe:	08 2d       	mov	r16, r8
     400:	19 2d       	mov	r17, r9
     402:	0e 94 27 0a 	call	0x144e	; 0x144e <__subdi3>
     406:	82 2e       	mov	r8, r18
     408:	93 2e       	mov	r9, r19
     40a:	a4 2e       	mov	r10, r20
     40c:	b5 2e       	mov	r11, r21
     40e:	c6 2e       	mov	r12, r22
     410:	d7 2e       	mov	r13, r23
     412:	e8 2e       	mov	r14, r24
     414:	f9 2e       	mov	r15, r25

00000416 <.Loc.40>:
     416:	28 2d       	mov	r18, r8
     418:	39 2d       	mov	r19, r9
     41a:	4a 2d       	mov	r20, r10
     41c:	5b 2d       	mov	r21, r11
     41e:	6c 2d       	mov	r22, r12
     420:	7d 2d       	mov	r23, r13
     422:	8e 2d       	mov	r24, r14
     424:	9f 2d       	mov	r25, r15
     426:	28 3c       	cpi	r18, 0xC8	; 200
     428:	31 05       	cpc	r19, r1
     42a:	41 05       	cpc	r20, r1
     42c:	51 05       	cpc	r21, r1
     42e:	61 05       	cpc	r22, r1
     430:	71 05       	cpc	r23, r1
     432:	81 05       	cpc	r24, r1
     434:	91 05       	cpc	r25, r1
     436:	09 f0       	breq	.+2      	; 0x43a <L0^A>

00000438 <L0^A>:
     438:	08 f4       	brcc	.+2      	; 0x43c <.Loc.41>

0000043a <L0^A>:
     43a:	3f c0       	rjmp	.+126    	; 0x4ba <.L13>

0000043c <.Loc.41>:
            if((PINF&(1<<PF1))== 0){//read kraan_load_unload pin
     43c:	8f e2       	ldi	r24, 0x2F	; 47
     43e:	90 e0       	ldi	r25, 0x00	; 0
     440:	fc 01       	movw	r30, r24
     442:	80 81       	ld	r24, Z

00000444 <.Loc.42>:
     444:	88 2f       	mov	r24, r24
     446:	90 e0       	ldi	r25, 0x00	; 0
     448:	82 70       	andi	r24, 0x02	; 2
     44a:	99 27       	eor	r25, r25

0000044c <.Loc.43>:
     44c:	00 97       	sbiw	r24, 0x00	; 0
     44e:	a9 f5       	brne	.+106    	; 0x4ba <.L13>

00000450 <.Loc.44>:
                load_unload_status = !load_unload_status;
     450:	80 91 0a 02 	lds	r24, 0x020A	; 0x80020a <load_unload_status.1>
     454:	90 91 0b 02 	lds	r25, 0x020B	; 0x80020b <load_unload_status.1+0x1>
     458:	21 e0       	ldi	r18, 0x01	; 1
     45a:	00 97       	sbiw	r24, 0x00	; 0
     45c:	09 f0       	breq	.+2      	; 0x460 <.L14>
     45e:	20 e0       	ldi	r18, 0x00	; 0

00000460 <.L14>:
     460:	82 2f       	mov	r24, r18
     462:	90 e0       	ldi	r25, 0x00	; 0

00000464 <.Loc.45>:
     464:	90 93 0b 02 	sts	0x020B, r25	; 0x80020b <load_unload_status.1+0x1>
     468:	80 93 0a 02 	sts	0x020A, r24	; 0x80020a <load_unload_status.1>

0000046c <.Loc.46>:
                //flip load_unload_status als knop ingedrukt is
                last_press_time = time_current_ms(0);
     46c:	80 e0       	ldi	r24, 0x00	; 0
     46e:	90 e0       	ldi	r25, 0x00	; 0
     470:	0e 94 c5 02 	call	0x58a	; 0x58a <time_current_ms>
     474:	9c 83       	std	Y+4, r25	; 0x04
     476:	8b 83       	std	Y+3, r24	; 0x03
     478:	89 2f       	mov	r24, r25
     47a:	88 0f       	add	r24, r24
     47c:	88 0b       	sbc	r24, r24
     47e:	8d 83       	std	Y+5, r24	; 0x05
     480:	8e 83       	std	Y+6, r24	; 0x06
     482:	8f 83       	std	Y+7, r24	; 0x07
     484:	88 87       	std	Y+8, r24	; 0x08
     486:	89 87       	std	Y+9, r24	; 0x09
     488:	8a 87       	std	Y+10, r24	; 0x0a

0000048a <.Loc.47>:
     48a:	fb 81       	ldd	r31, Y+3	; 0x03
     48c:	f0 93 0c 02 	sts	0x020C, r31	; 0x80020c <last_press_time.0>
     490:	8c 81       	ldd	r24, Y+4	; 0x04
     492:	80 93 0d 02 	sts	0x020D, r24	; 0x80020d <last_press_time.0+0x1>
     496:	ed 81       	ldd	r30, Y+5	; 0x05
     498:	e0 93 0e 02 	sts	0x020E, r30	; 0x80020e <last_press_time.0+0x2>
     49c:	fe 81       	ldd	r31, Y+6	; 0x06
     49e:	f0 93 0f 02 	sts	0x020F, r31	; 0x80020f <last_press_time.0+0x3>
     4a2:	8f 81       	ldd	r24, Y+7	; 0x07
     4a4:	80 93 10 02 	sts	0x0210, r24	; 0x800210 <last_press_time.0+0x4>
     4a8:	e8 85       	ldd	r30, Y+8	; 0x08
     4aa:	e0 93 11 02 	sts	0x0211, r30	; 0x800211 <last_press_time.0+0x5>
     4ae:	f9 85       	ldd	r31, Y+9	; 0x09
     4b0:	f0 93 12 02 	sts	0x0212, r31	; 0x800212 <last_press_time.0+0x6>
     4b4:	8a 85       	ldd	r24, Y+10	; 0x0a
     4b6:	80 93 13 02 	sts	0x0213, r24	; 0x800213 <last_press_time.0+0x7>

000004ba <.L13>:
            }
        }
    }
    if(load_unload_status)
     4ba:	80 91 0a 02 	lds	r24, 0x020A	; 0x80020a <load_unload_status.1>
     4be:	90 91 0b 02 	lds	r25, 0x020B	; 0x80020b <load_unload_status.1+0x1>

000004c2 <.Loc.49>:
     4c2:	00 97       	sbiw	r24, 0x00	; 0
     4c4:	51 f0       	breq	.+20     	; 0x4da <.L15>

000004c6 <.Loc.50>:
    {
        PORTB &= ~(1<<PB1);
     4c6:	85 e2       	ldi	r24, 0x25	; 37
     4c8:	90 e0       	ldi	r25, 0x00	; 0
     4ca:	fc 01       	movw	r30, r24
     4cc:	20 81       	ld	r18, Z

000004ce <.Loc.51>:
     4ce:	85 e2       	ldi	r24, 0x25	; 37
     4d0:	90 e0       	ldi	r25, 0x00	; 0

000004d2 <.Loc.52>:
     4d2:	2d 7f       	andi	r18, 0xFD	; 253
     4d4:	fc 01       	movw	r30, r24
     4d6:	20 83       	st	Z, r18
     4d8:	09 c0       	rjmp	.+18     	; 0x4ec <.L16>

000004da <.L15>:
    }
    else
    {
        PORTB |= (1<<PB1);
     4da:	85 e2       	ldi	r24, 0x25	; 37
     4dc:	90 e0       	ldi	r25, 0x00	; 0
     4de:	fc 01       	movw	r30, r24
     4e0:	20 81       	ld	r18, Z
     4e2:	85 e2       	ldi	r24, 0x25	; 37
     4e4:	90 e0       	ldi	r25, 0x00	; 0

000004e6 <.Loc.54>:
     4e6:	22 60       	ori	r18, 0x02	; 2
     4e8:	fc 01       	movw	r30, r24
     4ea:	20 83       	st	Z, r18

000004ec <.L16>:
    }
    return(load_unload_status);
     4ec:	80 91 0a 02 	lds	r24, 0x020A	; 0x80020a <load_unload_status.1>
     4f0:	90 91 0b 02 	lds	r25, 0x020B	; 0x80020b <load_unload_status.1+0x1>

000004f4 <.Loc.56>:
}
     4f4:	2a 96       	adiw	r28, 0x0a	; 10
     4f6:	0f b6       	in	r0, 0x3f	; 63
     4f8:	f8 94       	cli
     4fa:	de bf       	out	0x3e, r29	; 62
     4fc:	0f be       	out	0x3f, r0	; 63
     4fe:	cd bf       	out	0x3d, r28	; 61
     500:	df 91       	pop	r29
     502:	cf 91       	pop	r28
     504:	1f 91       	pop	r17
     506:	0f 91       	pop	r16
     508:	ff 90       	pop	r15
     50a:	ef 90       	pop	r14
     50c:	df 90       	pop	r13
     50e:	cf 90       	pop	r12
     510:	bf 90       	pop	r11
     512:	af 90       	pop	r10
     514:	9f 90       	pop	r9
     516:	8f 90       	pop	r8
     518:	7f 90       	pop	r7
     51a:	6f 90       	pop	r6
     51c:	5f 90       	pop	r5
     51e:	4f 90       	pop	r4
     520:	3f 90       	pop	r3
     522:	2f 90       	pop	r2
     524:	08 95       	ret

00000526 <init_time>:
*/

#include <avr/io.h>
#include <avr/interrupt.h>

void init_time(){
     526:	cf 93       	push	r28
     528:	df 93       	push	r29
     52a:	cd b7       	in	r28, 0x3d	; 61
     52c:	de b7       	in	r29, 0x3e	; 62

0000052e <.Loc.1>:
    cli();
     52e:	f8 94       	cli

00000530 <.Loc.2>:
    TCCR0A = 0;
     530:	84 e4       	ldi	r24, 0x44	; 68
     532:	90 e0       	ldi	r25, 0x00	; 0

00000534 <.Loc.3>:
     534:	fc 01       	movw	r30, r24
     536:	10 82       	st	Z, r1

00000538 <.Loc.4>:
    TCCR0B = 0;
     538:	85 e4       	ldi	r24, 0x45	; 69
     53a:	90 e0       	ldi	r25, 0x00	; 0

0000053c <.Loc.5>:
     53c:	fc 01       	movw	r30, r24
     53e:	10 82       	st	Z, r1

00000540 <.Loc.6>:
    TCNT0 = 6;
     540:	86 e4       	ldi	r24, 0x46	; 70
     542:	90 e0       	ldi	r25, 0x00	; 0

00000544 <.Loc.7>:
     544:	26 e0       	ldi	r18, 0x06	; 6
     546:	fc 01       	movw	r30, r24
     548:	20 83       	st	Z, r18

0000054a <.Loc.8>:
    TCCR0A |= (1 << WGM01);
     54a:	84 e4       	ldi	r24, 0x44	; 68
     54c:	90 e0       	ldi	r25, 0x00	; 0
     54e:	fc 01       	movw	r30, r24
     550:	20 81       	ld	r18, Z
     552:	84 e4       	ldi	r24, 0x44	; 68
     554:	90 e0       	ldi	r25, 0x00	; 0

00000556 <.Loc.9>:
     556:	22 60       	ori	r18, 0x02	; 2
     558:	fc 01       	movw	r30, r24
     55a:	20 83       	st	Z, r18

0000055c <.Loc.10>:
    TCCR0B |= (1 << CS01) | (1 << CS00);//prescaler 64
     55c:	85 e4       	ldi	r24, 0x45	; 69
     55e:	90 e0       	ldi	r25, 0x00	; 0
     560:	fc 01       	movw	r30, r24
     562:	20 81       	ld	r18, Z
     564:	85 e4       	ldi	r24, 0x45	; 69
     566:	90 e0       	ldi	r25, 0x00	; 0

00000568 <.Loc.11>:
     568:	23 60       	ori	r18, 0x03	; 3
     56a:	fc 01       	movw	r30, r24
     56c:	20 83       	st	Z, r18

0000056e <.Loc.12>:
    TIMSK0 |= (1 << TOIE0);
     56e:	8e e6       	ldi	r24, 0x6E	; 110
     570:	90 e0       	ldi	r25, 0x00	; 0
     572:	fc 01       	movw	r30, r24
     574:	20 81       	ld	r18, Z
     576:	8e e6       	ldi	r24, 0x6E	; 110
     578:	90 e0       	ldi	r25, 0x00	; 0

0000057a <.Loc.13>:
     57a:	21 60       	ori	r18, 0x01	; 1
     57c:	fc 01       	movw	r30, r24
     57e:	20 83       	st	Z, r18

00000580 <.Loc.14>:
    sei();
     580:	78 94       	sei

00000582 <.Loc.15>:
    //clock 0 defineren
    //interupt setpoint vaststellen
}
     582:	00 00       	nop
     584:	df 91       	pop	r29
     586:	cf 91       	pop	r28
     588:	08 95       	ret

0000058a <time_current_ms>:

int time_current_ms(int update){//0 = return, 1 = time++
     58a:	8f 92       	push	r8
     58c:	9f 92       	push	r9
     58e:	af 92       	push	r10
     590:	bf 92       	push	r11
     592:	cf 92       	push	r12
     594:	df 92       	push	r13
     596:	ef 92       	push	r14
     598:	ff 92       	push	r15
     59a:	0f 93       	push	r16
     59c:	1f 93       	push	r17
     59e:	cf 93       	push	r28
     5a0:	df 93       	push	r29
     5a2:	0f 92       	push	r0
     5a4:	0f 92       	push	r0
     5a6:	cd b7       	in	r28, 0x3d	; 61
     5a8:	de b7       	in	r29, 0x3e	; 62
     5aa:	9a 83       	std	Y+2, r25	; 0x02
     5ac:	89 83       	std	Y+1, r24	; 0x01

000005ae <.Loc.17>:
    static unsigned long long int time_ms = 0;
    if (update == 1){
     5ae:	89 81       	ldd	r24, Y+1	; 0x01
     5b0:	9a 81       	ldd	r25, Y+2	; 0x02
     5b2:	81 30       	cpi	r24, 0x01	; 1
     5b4:	91 05       	cpc	r25, r1
     5b6:	99 f5       	brne	.+102    	; 0x61e <.L3>

000005b8 <.Loc.18>:
        time_ms++;
     5b8:	80 90 14 02 	lds	r8, 0x0214	; 0x800214 <time_ms.0>
     5bc:	90 90 15 02 	lds	r9, 0x0215	; 0x800215 <time_ms.0+0x1>
     5c0:	a0 90 16 02 	lds	r10, 0x0216	; 0x800216 <time_ms.0+0x2>
     5c4:	b0 90 17 02 	lds	r11, 0x0217	; 0x800217 <time_ms.0+0x3>
     5c8:	c0 90 18 02 	lds	r12, 0x0218	; 0x800218 <time_ms.0+0x4>
     5cc:	d0 90 19 02 	lds	r13, 0x0219	; 0x800219 <time_ms.0+0x5>
     5d0:	e0 90 1a 02 	lds	r14, 0x021A	; 0x80021a <time_ms.0+0x6>
     5d4:	f0 90 1b 02 	lds	r15, 0x021B	; 0x80021b <time_ms.0+0x7>
     5d8:	28 2d       	mov	r18, r8
     5da:	39 2d       	mov	r19, r9
     5dc:	4a 2d       	mov	r20, r10
     5de:	5b 2d       	mov	r21, r11
     5e0:	6c 2d       	mov	r22, r12
     5e2:	7d 2d       	mov	r23, r13
     5e4:	8e 2d       	mov	r24, r14
     5e6:	9f 2d       	mov	r25, r15
     5e8:	a1 e0       	ldi	r26, 0x01	; 1
     5ea:	0e 94 1b 0a 	call	0x1436	; 0x1436 <__adddi3_s8>
     5ee:	82 2e       	mov	r8, r18
     5f0:	93 2e       	mov	r9, r19
     5f2:	a4 2e       	mov	r10, r20
     5f4:	b5 2e       	mov	r11, r21
     5f6:	c6 2e       	mov	r12, r22
     5f8:	d7 2e       	mov	r13, r23
     5fa:	e8 2e       	mov	r14, r24
     5fc:	f9 2e       	mov	r15, r25
     5fe:	80 92 14 02 	sts	0x0214, r8	; 0x800214 <time_ms.0>
     602:	90 92 15 02 	sts	0x0215, r9	; 0x800215 <time_ms.0+0x1>
     606:	a0 92 16 02 	sts	0x0216, r10	; 0x800216 <time_ms.0+0x2>
     60a:	b0 92 17 02 	sts	0x0217, r11	; 0x800217 <time_ms.0+0x3>
     60e:	c0 92 18 02 	sts	0x0218, r12	; 0x800218 <time_ms.0+0x4>
     612:	d0 92 19 02 	sts	0x0219, r13	; 0x800219 <time_ms.0+0x5>
     616:	e0 92 1a 02 	sts	0x021A, r14	; 0x80021a <time_ms.0+0x6>
     61a:	f0 92 1b 02 	sts	0x021B, r15	; 0x80021b <time_ms.0+0x7>

0000061e <.L3>:
    }
    return(time_ms);
     61e:	00 91 14 02 	lds	r16, 0x0214	; 0x800214 <time_ms.0>
     622:	10 91 15 02 	lds	r17, 0x0215	; 0x800215 <time_ms.0+0x1>
     626:	20 91 16 02 	lds	r18, 0x0216	; 0x800216 <time_ms.0+0x2>
     62a:	30 91 17 02 	lds	r19, 0x0217	; 0x800217 <time_ms.0+0x3>
     62e:	40 91 18 02 	lds	r20, 0x0218	; 0x800218 <time_ms.0+0x4>
     632:	50 91 19 02 	lds	r21, 0x0219	; 0x800219 <time_ms.0+0x5>
     636:	60 91 1a 02 	lds	r22, 0x021A	; 0x80021a <time_ms.0+0x6>
     63a:	70 91 1b 02 	lds	r23, 0x021B	; 0x80021b <time_ms.0+0x7>
     63e:	c8 01       	movw	r24, r16

00000640 <.Loc.20>:
}
     640:	0f 90       	pop	r0
     642:	0f 90       	pop	r0
     644:	df 91       	pop	r29
     646:	cf 91       	pop	r28
     648:	1f 91       	pop	r17
     64a:	0f 91       	pop	r16
     64c:	ff 90       	pop	r15
     64e:	ef 90       	pop	r14
     650:	df 90       	pop	r13
     652:	cf 90       	pop	r12
     654:	bf 90       	pop	r11
     656:	af 90       	pop	r10
     658:	9f 90       	pop	r9
     65a:	8f 90       	pop	r8
     65c:	08 95       	ret

0000065e <__vector_23>:

ISR(TIMER0_OVF_vect){
     65e:	1f 92       	push	r1
     660:	0f 92       	push	r0
     662:	0f b6       	in	r0, 0x3f	; 63
     664:	0f 92       	push	r0
     666:	11 24       	eor	r1, r1
     668:	0b b6       	in	r0, 0x3b	; 59
     66a:	0f 92       	push	r0
     66c:	2f 93       	push	r18
     66e:	3f 93       	push	r19
     670:	4f 93       	push	r20
     672:	5f 93       	push	r21
     674:	6f 93       	push	r22
     676:	7f 93       	push	r23
     678:	8f 93       	push	r24
     67a:	9f 93       	push	r25
     67c:	af 93       	push	r26
     67e:	bf 93       	push	r27
     680:	ef 93       	push	r30
     682:	ff 93       	push	r31
     684:	cf 93       	push	r28
     686:	df 93       	push	r29
     688:	cd b7       	in	r28, 0x3d	; 61
     68a:	de b7       	in	r29, 0x3e	; 62

0000068c <.Loc.22>:
    TCNT0 = 6;
     68c:	86 e4       	ldi	r24, 0x46	; 70
     68e:	90 e0       	ldi	r25, 0x00	; 0

00000690 <.Loc.23>:
     690:	26 e0       	ldi	r18, 0x06	; 6
     692:	fc 01       	movw	r30, r24
     694:	20 83       	st	Z, r18

00000696 <.Loc.24>:
    time_current_ms(1);
     696:	81 e0       	ldi	r24, 0x01	; 1
     698:	90 e0       	ldi	r25, 0x00	; 0
     69a:	0e 94 c5 02 	call	0x58a	; 0x58a <time_current_ms>

0000069e <.Loc.25>:
}
     69e:	00 00       	nop
     6a0:	df 91       	pop	r29
     6a2:	cf 91       	pop	r28
     6a4:	ff 91       	pop	r31
     6a6:	ef 91       	pop	r30
     6a8:	bf 91       	pop	r27
     6aa:	af 91       	pop	r26
     6ac:	9f 91       	pop	r25
     6ae:	8f 91       	pop	r24
     6b0:	7f 91       	pop	r23
     6b2:	6f 91       	pop	r22
     6b4:	5f 91       	pop	r21
     6b6:	4f 91       	pop	r20
     6b8:	3f 91       	pop	r19
     6ba:	2f 91       	pop	r18
     6bc:	0f 90       	pop	r0
     6be:	0b be       	out	0x3b, r0	; 59
     6c0:	0f 90       	pop	r0
     6c2:	0f be       	out	0x3f, r0	; 63
     6c4:	0f 90       	pop	r0
     6c6:	1f 90       	pop	r1
     6c8:	18 95       	reti

000006ca <sabs16>:
#include <avr/io.h>
#include <avr/interrupt.h>
//motor init gebruikt timers 3 4 en 5

int16_t sabs16(int16_t i)
{
     6ca:	cf 93       	push	r28
     6cc:	df 93       	push	r29
     6ce:	00 d0       	rcall	.+0      	; 0x6d0 <L0^A>

000006d0 <L0^A>:
     6d0:	0f 92       	push	r0
     6d2:	cd b7       	in	r28, 0x3d	; 61
     6d4:	de b7       	in	r29, 0x3e	; 62
     6d6:	9c 83       	std	Y+4, r25	; 0x04
     6d8:	8b 83       	std	Y+3, r24	; 0x03

000006da <.Loc.1>:
    int16_t res;

    if (INT16_MIN == i)
     6da:	8b 81       	ldd	r24, Y+3	; 0x03
     6dc:	9c 81       	ldd	r25, Y+4	; 0x04
     6de:	81 15       	cp	r24, r1
     6e0:	20 e8       	ldi	r18, 0x80	; 128
     6e2:	92 07       	cpc	r25, r18
     6e4:	29 f4       	brne	.+10     	; 0x6f0 <.L2>

000006e6 <.Loc.2>:
    {
        res = INT16_MAX;
     6e6:	8f ef       	ldi	r24, 0xFF	; 255
     6e8:	9f e7       	ldi	r25, 0x7F	; 127
     6ea:	9a 83       	std	Y+2, r25	; 0x02
     6ec:	89 83       	std	Y+1, r24	; 0x01
     6ee:	09 c0       	rjmp	.+18     	; 0x702 <.L3>

000006f0 <.L2>:
    }
    else
    {
        res = i < 0 ? -i : i;
     6f0:	8b 81       	ldd	r24, Y+3	; 0x03
     6f2:	9c 81       	ldd	r25, Y+4	; 0x04
     6f4:	99 23       	and	r25, r25
     6f6:	1c f4       	brge	.+6      	; 0x6fe <.L4>
     6f8:	91 95       	neg	r25
     6fa:	81 95       	neg	r24
     6fc:	91 09       	sbc	r25, r1

000006fe <.L4>:
     6fe:	9a 83       	std	Y+2, r25	; 0x02
     700:	89 83       	std	Y+1, r24	; 0x01

00000702 <.L3>:
    }

    return res;
     702:	89 81       	ldd	r24, Y+1	; 0x01
     704:	9a 81       	ldd	r25, Y+2	; 0x02

00000706 <.Loc.5>:
}
     706:	0f 90       	pop	r0
     708:	0f 90       	pop	r0
     70a:	0f 90       	pop	r0
     70c:	0f 90       	pop	r0
     70e:	df 91       	pop	r29
     710:	cf 91       	pop	r28
     712:	08 95       	ret

00000714 <init_motors>:

void init_motors(void)
{
     714:	cf 93       	push	r28
     716:	df 93       	push	r29
     718:	cd b7       	in	r28, 0x3d	; 61
     71a:	de b7       	in	r29, 0x3e	; 62

0000071c <.Loc.7>:
    cli();
     71c:	f8 94       	cli

0000071e <.Loc.8>:
    TCCR3A |= (1<<WGM32) | (1<<COM3A1) | (1<<COM3B1);
     71e:	80 e9       	ldi	r24, 0x90	; 144
     720:	90 e0       	ldi	r25, 0x00	; 0
     722:	fc 01       	movw	r30, r24
     724:	20 81       	ld	r18, Z
     726:	80 e9       	ldi	r24, 0x90	; 144
     728:	90 e0       	ldi	r25, 0x00	; 0

0000072a <.Loc.9>:
     72a:	28 6a       	ori	r18, 0xA8	; 168
     72c:	fc 01       	movw	r30, r24
     72e:	20 83       	st	Z, r18

00000730 <.Loc.10>:
    TCCR3B |= (1<<WGM31);
     730:	81 e9       	ldi	r24, 0x91	; 145
     732:	90 e0       	ldi	r25, 0x00	; 0
     734:	fc 01       	movw	r30, r24
     736:	20 81       	ld	r18, Z
     738:	81 e9       	ldi	r24, 0x91	; 145
     73a:	90 e0       	ldi	r25, 0x00	; 0

0000073c <.Loc.11>:
     73c:	22 60       	ori	r18, 0x02	; 2
     73e:	fc 01       	movw	r30, r24
     740:	20 83       	st	Z, r18

00000742 <.Loc.12>:
    OCR3A = 0;
     742:	88 e9       	ldi	r24, 0x98	; 152
     744:	90 e0       	ldi	r25, 0x00	; 0

00000746 <.Loc.13>:
     746:	fc 01       	movw	r30, r24
     748:	11 82       	std	Z+1, r1	; 0x01
     74a:	10 82       	st	Z, r1

0000074c <.Loc.14>:
    OCR3B = 0;
     74c:	8a e9       	ldi	r24, 0x9A	; 154
     74e:	90 e0       	ldi	r25, 0x00	; 0

00000750 <.Loc.15>:
     750:	fc 01       	movw	r30, r24
     752:	11 82       	std	Z+1, r1	; 0x01
     754:	10 82       	st	Z, r1

00000756 <.Loc.16>:
    DDRE |= (1<<PE3) | (1<<PE4);
     756:	8d e2       	ldi	r24, 0x2D	; 45
     758:	90 e0       	ldi	r25, 0x00	; 0
     75a:	fc 01       	movw	r30, r24
     75c:	20 81       	ld	r18, Z
     75e:	8d e2       	ldi	r24, 0x2D	; 45
     760:	90 e0       	ldi	r25, 0x00	; 0

00000762 <.Loc.17>:
     762:	28 61       	ori	r18, 0x18	; 24
     764:	fc 01       	movw	r30, r24
     766:	20 83       	st	Z, r18

00000768 <.Loc.18>:

    TCCR4A |= (1<<WGM41) | (1<<COM4A1) | (1<<COM4B1);
     768:	80 ea       	ldi	r24, 0xA0	; 160
     76a:	90 e0       	ldi	r25, 0x00	; 0
     76c:	fc 01       	movw	r30, r24
     76e:	20 81       	ld	r18, Z
     770:	80 ea       	ldi	r24, 0xA0	; 160
     772:	90 e0       	ldi	r25, 0x00	; 0

00000774 <.Loc.19>:
     774:	22 6a       	ori	r18, 0xA2	; 162
     776:	fc 01       	movw	r30, r24
     778:	20 83       	st	Z, r18

0000077a <.Loc.20>:
    TCCR4B |= (1<<WGM42) | (1<<CS40);
     77a:	81 ea       	ldi	r24, 0xA1	; 161
     77c:	90 e0       	ldi	r25, 0x00	; 0
     77e:	fc 01       	movw	r30, r24
     780:	20 81       	ld	r18, Z
     782:	81 ea       	ldi	r24, 0xA1	; 161
     784:	90 e0       	ldi	r25, 0x00	; 0

00000786 <.Loc.21>:
     786:	29 60       	ori	r18, 0x09	; 9
     788:	fc 01       	movw	r30, r24
     78a:	20 83       	st	Z, r18

0000078c <.Loc.22>:
    OCR4A = 0;
     78c:	88 ea       	ldi	r24, 0xA8	; 168
     78e:	90 e0       	ldi	r25, 0x00	; 0

00000790 <.Loc.23>:
     790:	fc 01       	movw	r30, r24
     792:	11 82       	std	Z+1, r1	; 0x01
     794:	10 82       	st	Z, r1

00000796 <.Loc.24>:
    OCR4B = 0;
     796:	8a ea       	ldi	r24, 0xAA	; 170
     798:	90 e0       	ldi	r25, 0x00	; 0

0000079a <.Loc.25>:
     79a:	fc 01       	movw	r30, r24
     79c:	11 82       	std	Z+1, r1	; 0x01
     79e:	10 82       	st	Z, r1

000007a0 <.Loc.26>:
    DDRH = (1<<PH3) | (1<<PH4);
     7a0:	81 e0       	ldi	r24, 0x01	; 1
     7a2:	91 e0       	ldi	r25, 0x01	; 1

000007a4 <.Loc.27>:
     7a4:	28 e1       	ldi	r18, 0x18	; 24
     7a6:	fc 01       	movw	r30, r24
     7a8:	20 83       	st	Z, r18

000007aa <.Loc.28>:

    TCCR5A |= (1<<WGM51) | (1<<COM5A1) | (1<<COM5B1);
     7aa:	80 e2       	ldi	r24, 0x20	; 32
     7ac:	91 e0       	ldi	r25, 0x01	; 1
     7ae:	fc 01       	movw	r30, r24
     7b0:	20 81       	ld	r18, Z
     7b2:	80 e2       	ldi	r24, 0x20	; 32
     7b4:	91 e0       	ldi	r25, 0x01	; 1

000007b6 <.Loc.29>:
     7b6:	22 6a       	ori	r18, 0xA2	; 162
     7b8:	fc 01       	movw	r30, r24
     7ba:	20 83       	st	Z, r18

000007bc <.Loc.30>:
    TCCR5B |= (1<<WGM52) | (1<<CS50);
     7bc:	81 e2       	ldi	r24, 0x21	; 33
     7be:	91 e0       	ldi	r25, 0x01	; 1
     7c0:	fc 01       	movw	r30, r24
     7c2:	20 81       	ld	r18, Z
     7c4:	81 e2       	ldi	r24, 0x21	; 33
     7c6:	91 e0       	ldi	r25, 0x01	; 1

000007c8 <.Loc.31>:
     7c8:	29 60       	ori	r18, 0x09	; 9
     7ca:	fc 01       	movw	r30, r24
     7cc:	20 83       	st	Z, r18

000007ce <.Loc.32>:
    OCR5A = 0;
     7ce:	88 e2       	ldi	r24, 0x28	; 40
     7d0:	91 e0       	ldi	r25, 0x01	; 1

000007d2 <.Loc.33>:
     7d2:	fc 01       	movw	r30, r24
     7d4:	11 82       	std	Z+1, r1	; 0x01
     7d6:	10 82       	st	Z, r1

000007d8 <.Loc.34>:
    OCR5B = 0;
     7d8:	8a e2       	ldi	r24, 0x2A	; 42
     7da:	91 e0       	ldi	r25, 0x01	; 1

000007dc <.Loc.35>:
     7dc:	fc 01       	movw	r30, r24
     7de:	11 82       	std	Z+1, r1	; 0x01
     7e0:	10 82       	st	Z, r1

000007e2 <.Loc.36>:
    DDRL = (1<<PL3) | (1<<PL4);
     7e2:	8a e0       	ldi	r24, 0x0A	; 10
     7e4:	91 e0       	ldi	r25, 0x01	; 1

000007e6 <.Loc.37>:
     7e6:	28 e1       	ldi	r18, 0x18	; 24
     7e8:	fc 01       	movw	r30, r24
     7ea:	20 83       	st	Z, r18

000007ec <.Loc.38>:

    TCNT3 = 0;
     7ec:	84 e9       	ldi	r24, 0x94	; 148
     7ee:	90 e0       	ldi	r25, 0x00	; 0

000007f0 <.Loc.39>:
     7f0:	fc 01       	movw	r30, r24
     7f2:	11 82       	std	Z+1, r1	; 0x01
     7f4:	10 82       	st	Z, r1

000007f6 <.Loc.40>:
    TCNT4 = 0;
     7f6:	84 ea       	ldi	r24, 0xA4	; 164
     7f8:	90 e0       	ldi	r25, 0x00	; 0

000007fa <.Loc.41>:
     7fa:	fc 01       	movw	r30, r24
     7fc:	11 82       	std	Z+1, r1	; 0x01
     7fe:	10 82       	st	Z, r1

00000800 <.Loc.42>:
    TCNT5 = 0;
     800:	84 e2       	ldi	r24, 0x24	; 36
     802:	91 e0       	ldi	r25, 0x01	; 1

00000804 <.Loc.43>:
     804:	fc 01       	movw	r30, r24
     806:	11 82       	std	Z+1, r1	; 0x01
     808:	10 82       	st	Z, r1

0000080a <.Loc.44>:

    sei();
     80a:	78 94       	sei

0000080c <.Loc.45>:
}
     80c:	00 00       	nop
     80e:	df 91       	pop	r29
     810:	cf 91       	pop	r28
     812:	08 95       	ret

00000814 <motor_speed_x>:

void motor_speed_x(int percentage)
{
     814:	cf 93       	push	r28
     816:	df 93       	push	r29
     818:	0f 92       	push	r0
     81a:	0f 92       	push	r0
     81c:	cd b7       	in	r28, 0x3d	; 61
     81e:	de b7       	in	r29, 0x3e	; 62
     820:	9a 83       	std	Y+2, r25	; 0x02
     822:	89 83       	std	Y+1, r24	; 0x01

00000824 <.Loc.47>:
    if((percentage < 100) && (percentage > -100))
     824:	89 81       	ldd	r24, Y+1	; 0x01
     826:	9a 81       	ldd	r25, Y+2	; 0x02
     828:	83 36       	cpi	r24, 0x63	; 99
     82a:	91 05       	cpc	r25, r1
     82c:	11 f0       	breq	.+4      	; 0x832 <.Loc.48>

0000082e <L0^A>:
     82e:	0c f0       	brlt	.+2      	; 0x832 <.Loc.48>

00000830 <L0^A>:
     830:	4a c0       	rjmp	.+148    	; 0x8c6 <.L11>

00000832 <.Loc.48>:
     832:	89 81       	ldd	r24, Y+1	; 0x01
     834:	9a 81       	ldd	r25, Y+2	; 0x02
     836:	8d 39       	cpi	r24, 0x9D	; 157
     838:	2f ef       	ldi	r18, 0xFF	; 255
     83a:	92 07       	cpc	r25, r18
     83c:	0c f4       	brge	.+2      	; 0x840 <.Loc.49>

0000083e <L0^A>:
     83e:	43 c0       	rjmp	.+134    	; 0x8c6 <.L11>

00000840 <.Loc.49>:
    {
        if(percentage > 0)
     840:	89 81       	ldd	r24, Y+1	; 0x01
     842:	9a 81       	ldd	r25, Y+2	; 0x02
     844:	00 97       	sbiw	r24, 0x00	; 0
     846:	b9 f0       	breq	.+46     	; 0x876 <.L9>
     848:	b4 f0       	brlt	.+44     	; 0x876 <.L9>

0000084a <.Loc.50>:
        {
            OCR3A = 512*percentage/100;
     84a:	89 81       	ldd	r24, Y+1	; 0x01
     84c:	9a 81       	ldd	r25, Y+2	; 0x02
     84e:	98 2f       	mov	r25, r24
     850:	88 27       	eor	r24, r24
     852:	99 0f       	add	r25, r25

00000854 <.Loc.51>:
     854:	24 e6       	ldi	r18, 0x64	; 100
     856:	30 e0       	ldi	r19, 0x00	; 0
     858:	b9 01       	movw	r22, r18
     85a:	0e 94 07 0a 	call	0x140e	; 0x140e <__divmodhi4>
     85e:	cb 01       	movw	r24, r22
     860:	9c 01       	movw	r18, r24

00000862 <.Loc.52>:
     862:	88 e9       	ldi	r24, 0x98	; 152
     864:	90 e0       	ldi	r25, 0x00	; 0

00000866 <.Loc.53>:
     866:	fc 01       	movw	r30, r24
     868:	31 83       	std	Z+1, r19	; 0x01
     86a:	20 83       	st	Z, r18

0000086c <.Loc.54>:
            OCR3B = 0;
     86c:	8a e9       	ldi	r24, 0x9A	; 154
     86e:	90 e0       	ldi	r25, 0x00	; 0

00000870 <.Loc.55>:
     870:	fc 01       	movw	r30, r24
     872:	11 82       	std	Z+1, r1	; 0x01
     874:	10 82       	st	Z, r1

00000876 <.L9>:
        }
        if(percentage < 0)
     876:	89 81       	ldd	r24, Y+1	; 0x01
     878:	9a 81       	ldd	r25, Y+2	; 0x02
     87a:	99 23       	and	r25, r25
     87c:	b4 f4       	brge	.+44     	; 0x8aa <.L10>

0000087e <.Loc.57>:
        {
            OCR3A = 0;
     87e:	88 e9       	ldi	r24, 0x98	; 152
     880:	90 e0       	ldi	r25, 0x00	; 0

00000882 <.Loc.58>:
     882:	fc 01       	movw	r30, r24
     884:	11 82       	std	Z+1, r1	; 0x01
     886:	10 82       	st	Z, r1

00000888 <.Loc.59>:
            OCR3B = 512*percentage/-100;
     888:	89 81       	ldd	r24, Y+1	; 0x01
     88a:	9a 81       	ldd	r25, Y+2	; 0x02
     88c:	98 2f       	mov	r25, r24
     88e:	88 27       	eor	r24, r24
     890:	99 0f       	add	r25, r25

00000892 <.Loc.60>:
     892:	2c e9       	ldi	r18, 0x9C	; 156
     894:	3f ef       	ldi	r19, 0xFF	; 255
     896:	b9 01       	movw	r22, r18
     898:	0e 94 07 0a 	call	0x140e	; 0x140e <__divmodhi4>
     89c:	cb 01       	movw	r24, r22
     89e:	9c 01       	movw	r18, r24

000008a0 <.Loc.61>:
     8a0:	8a e9       	ldi	r24, 0x9A	; 154
     8a2:	90 e0       	ldi	r25, 0x00	; 0

000008a4 <.Loc.62>:
     8a4:	fc 01       	movw	r30, r24
     8a6:	31 83       	std	Z+1, r19	; 0x01
     8a8:	20 83       	st	Z, r18

000008aa <.L10>:
        }
        if(percentage == 0)
     8aa:	89 81       	ldd	r24, Y+1	; 0x01
     8ac:	9a 81       	ldd	r25, Y+2	; 0x02
     8ae:	00 97       	sbiw	r24, 0x00	; 0
     8b0:	51 f4       	brne	.+20     	; 0x8c6 <.L11>

000008b2 <.Loc.64>:
        {
            OCR3A = 0;
     8b2:	88 e9       	ldi	r24, 0x98	; 152
     8b4:	90 e0       	ldi	r25, 0x00	; 0

000008b6 <.Loc.65>:
     8b6:	fc 01       	movw	r30, r24
     8b8:	11 82       	std	Z+1, r1	; 0x01
     8ba:	10 82       	st	Z, r1

000008bc <.Loc.66>:
            OCR3B = 0;
     8bc:	8a e9       	ldi	r24, 0x9A	; 154
     8be:	90 e0       	ldi	r25, 0x00	; 0

000008c0 <.Loc.67>:
     8c0:	fc 01       	movw	r30, r24
     8c2:	11 82       	std	Z+1, r1	; 0x01
     8c4:	10 82       	st	Z, r1

000008c6 <.L11>:
        }
    }
}
     8c6:	00 00       	nop
     8c8:	0f 90       	pop	r0
     8ca:	0f 90       	pop	r0
     8cc:	df 91       	pop	r29
     8ce:	cf 91       	pop	r28
     8d0:	08 95       	ret

000008d2 <motor_speed_y>:

void motor_speed_y(int percentage)
{
     8d2:	cf 93       	push	r28
     8d4:	df 93       	push	r29
     8d6:	0f 92       	push	r0
     8d8:	0f 92       	push	r0
     8da:	cd b7       	in	r28, 0x3d	; 61
     8dc:	de b7       	in	r29, 0x3e	; 62
     8de:	9a 83       	std	Y+2, r25	; 0x02
     8e0:	89 83       	std	Y+1, r24	; 0x01

000008e2 <.Loc.70>:
    if((percentage < 100) && (percentage > -100))
     8e2:	89 81       	ldd	r24, Y+1	; 0x01
     8e4:	9a 81       	ldd	r25, Y+2	; 0x02
     8e6:	83 36       	cpi	r24, 0x63	; 99
     8e8:	91 05       	cpc	r25, r1
     8ea:	11 f0       	breq	.+4      	; 0x8f0 <.Loc.71>

000008ec <L0^A>:
     8ec:	0c f0       	brlt	.+2      	; 0x8f0 <.Loc.71>

000008ee <L0^A>:
     8ee:	4a c0       	rjmp	.+148    	; 0x984 <.L16>

000008f0 <.Loc.71>:
     8f0:	89 81       	ldd	r24, Y+1	; 0x01
     8f2:	9a 81       	ldd	r25, Y+2	; 0x02
     8f4:	8d 39       	cpi	r24, 0x9D	; 157
     8f6:	2f ef       	ldi	r18, 0xFF	; 255
     8f8:	92 07       	cpc	r25, r18
     8fa:	0c f4       	brge	.+2      	; 0x8fe <.Loc.72>

000008fc <L0^A>:
     8fc:	43 c0       	rjmp	.+134    	; 0x984 <.L16>

000008fe <.Loc.72>:
    {
        if(percentage > 0)
     8fe:	89 81       	ldd	r24, Y+1	; 0x01
     900:	9a 81       	ldd	r25, Y+2	; 0x02
     902:	00 97       	sbiw	r24, 0x00	; 0
     904:	b9 f0       	breq	.+46     	; 0x934 <.L14>
     906:	b4 f0       	brlt	.+44     	; 0x934 <.L14>

00000908 <.Loc.73>:
        {
            OCR4A = 512*percentage/100;
     908:	89 81       	ldd	r24, Y+1	; 0x01
     90a:	9a 81       	ldd	r25, Y+2	; 0x02
     90c:	98 2f       	mov	r25, r24
     90e:	88 27       	eor	r24, r24
     910:	99 0f       	add	r25, r25

00000912 <.Loc.74>:
     912:	24 e6       	ldi	r18, 0x64	; 100
     914:	30 e0       	ldi	r19, 0x00	; 0
     916:	b9 01       	movw	r22, r18
     918:	0e 94 07 0a 	call	0x140e	; 0x140e <__divmodhi4>
     91c:	cb 01       	movw	r24, r22
     91e:	9c 01       	movw	r18, r24

00000920 <.Loc.75>:
     920:	88 ea       	ldi	r24, 0xA8	; 168
     922:	90 e0       	ldi	r25, 0x00	; 0

00000924 <.Loc.76>:
     924:	fc 01       	movw	r30, r24
     926:	31 83       	std	Z+1, r19	; 0x01
     928:	20 83       	st	Z, r18

0000092a <.Loc.77>:
            OCR4B = 0;
     92a:	8a ea       	ldi	r24, 0xAA	; 170
     92c:	90 e0       	ldi	r25, 0x00	; 0

0000092e <.Loc.78>:
     92e:	fc 01       	movw	r30, r24
     930:	11 82       	std	Z+1, r1	; 0x01
     932:	10 82       	st	Z, r1

00000934 <.L14>:
        }
        if(percentage < 0)
     934:	89 81       	ldd	r24, Y+1	; 0x01
     936:	9a 81       	ldd	r25, Y+2	; 0x02
     938:	99 23       	and	r25, r25
     93a:	b4 f4       	brge	.+44     	; 0x968 <.L15>

0000093c <.Loc.80>:
        {
            OCR4A = 0;
     93c:	88 ea       	ldi	r24, 0xA8	; 168
     93e:	90 e0       	ldi	r25, 0x00	; 0

00000940 <.Loc.81>:
     940:	fc 01       	movw	r30, r24
     942:	11 82       	std	Z+1, r1	; 0x01
     944:	10 82       	st	Z, r1

00000946 <.Loc.82>:
            OCR4B = 512*percentage/-100;
     946:	89 81       	ldd	r24, Y+1	; 0x01
     948:	9a 81       	ldd	r25, Y+2	; 0x02
     94a:	98 2f       	mov	r25, r24
     94c:	88 27       	eor	r24, r24
     94e:	99 0f       	add	r25, r25

00000950 <.Loc.83>:
     950:	2c e9       	ldi	r18, 0x9C	; 156
     952:	3f ef       	ldi	r19, 0xFF	; 255
     954:	b9 01       	movw	r22, r18
     956:	0e 94 07 0a 	call	0x140e	; 0x140e <__divmodhi4>
     95a:	cb 01       	movw	r24, r22
     95c:	9c 01       	movw	r18, r24

0000095e <.Loc.84>:
     95e:	8a ea       	ldi	r24, 0xAA	; 170
     960:	90 e0       	ldi	r25, 0x00	; 0

00000962 <.Loc.85>:
     962:	fc 01       	movw	r30, r24
     964:	31 83       	std	Z+1, r19	; 0x01
     966:	20 83       	st	Z, r18

00000968 <.L15>:
        }
        if(percentage == 0)
     968:	89 81       	ldd	r24, Y+1	; 0x01
     96a:	9a 81       	ldd	r25, Y+2	; 0x02
     96c:	00 97       	sbiw	r24, 0x00	; 0
     96e:	51 f4       	brne	.+20     	; 0x984 <.L16>

00000970 <.Loc.87>:
        {
            OCR4A = 0;
     970:	88 ea       	ldi	r24, 0xA8	; 168
     972:	90 e0       	ldi	r25, 0x00	; 0

00000974 <.Loc.88>:
     974:	fc 01       	movw	r30, r24
     976:	11 82       	std	Z+1, r1	; 0x01
     978:	10 82       	st	Z, r1

0000097a <.Loc.89>:
            OCR4B = 0;
     97a:	8a ea       	ldi	r24, 0xAA	; 170
     97c:	90 e0       	ldi	r25, 0x00	; 0

0000097e <.Loc.90>:
     97e:	fc 01       	movw	r30, r24
     980:	11 82       	std	Z+1, r1	; 0x01
     982:	10 82       	st	Z, r1

00000984 <.L16>:
        }
    }
}
     984:	00 00       	nop
     986:	0f 90       	pop	r0
     988:	0f 90       	pop	r0
     98a:	df 91       	pop	r29
     98c:	cf 91       	pop	r28
     98e:	08 95       	ret

00000990 <motor_speed_z>:

void motor_speed_z(int percentage)
{
     990:	cf 93       	push	r28
     992:	df 93       	push	r29
     994:	0f 92       	push	r0
     996:	0f 92       	push	r0
     998:	cd b7       	in	r28, 0x3d	; 61
     99a:	de b7       	in	r29, 0x3e	; 62
     99c:	9a 83       	std	Y+2, r25	; 0x02
     99e:	89 83       	std	Y+1, r24	; 0x01

000009a0 <.Loc.93>:
    if((percentage < 100) && (percentage > -100))
     9a0:	89 81       	ldd	r24, Y+1	; 0x01
     9a2:	9a 81       	ldd	r25, Y+2	; 0x02
     9a4:	83 36       	cpi	r24, 0x63	; 99
     9a6:	91 05       	cpc	r25, r1
     9a8:	11 f0       	breq	.+4      	; 0x9ae <.Loc.94>

000009aa <L0^A>:
     9aa:	0c f0       	brlt	.+2      	; 0x9ae <.Loc.94>

000009ac <L0^A>:
     9ac:	4a c0       	rjmp	.+148    	; 0xa42 <.L21>

000009ae <.Loc.94>:
     9ae:	89 81       	ldd	r24, Y+1	; 0x01
     9b0:	9a 81       	ldd	r25, Y+2	; 0x02
     9b2:	8d 39       	cpi	r24, 0x9D	; 157
     9b4:	2f ef       	ldi	r18, 0xFF	; 255
     9b6:	92 07       	cpc	r25, r18
     9b8:	0c f4       	brge	.+2      	; 0x9bc <.Loc.95>

000009ba <L0^A>:
     9ba:	43 c0       	rjmp	.+134    	; 0xa42 <.L21>

000009bc <.Loc.95>:
    {
        if(percentage > 0)
     9bc:	89 81       	ldd	r24, Y+1	; 0x01
     9be:	9a 81       	ldd	r25, Y+2	; 0x02
     9c0:	00 97       	sbiw	r24, 0x00	; 0
     9c2:	b9 f0       	breq	.+46     	; 0x9f2 <.L19>
     9c4:	b4 f0       	brlt	.+44     	; 0x9f2 <.L19>

000009c6 <.Loc.96>:
        {
            OCR5A = 512*percentage/100;
     9c6:	89 81       	ldd	r24, Y+1	; 0x01
     9c8:	9a 81       	ldd	r25, Y+2	; 0x02
     9ca:	98 2f       	mov	r25, r24
     9cc:	88 27       	eor	r24, r24
     9ce:	99 0f       	add	r25, r25

000009d0 <.Loc.97>:
     9d0:	24 e6       	ldi	r18, 0x64	; 100
     9d2:	30 e0       	ldi	r19, 0x00	; 0
     9d4:	b9 01       	movw	r22, r18
     9d6:	0e 94 07 0a 	call	0x140e	; 0x140e <__divmodhi4>
     9da:	cb 01       	movw	r24, r22
     9dc:	9c 01       	movw	r18, r24

000009de <.Loc.98>:
     9de:	88 e2       	ldi	r24, 0x28	; 40
     9e0:	91 e0       	ldi	r25, 0x01	; 1

000009e2 <.Loc.99>:
     9e2:	fc 01       	movw	r30, r24
     9e4:	31 83       	std	Z+1, r19	; 0x01
     9e6:	20 83       	st	Z, r18

000009e8 <.Loc.100>:
            OCR5B = 0;
     9e8:	8a e2       	ldi	r24, 0x2A	; 42
     9ea:	91 e0       	ldi	r25, 0x01	; 1

000009ec <.Loc.101>:
     9ec:	fc 01       	movw	r30, r24
     9ee:	11 82       	std	Z+1, r1	; 0x01
     9f0:	10 82       	st	Z, r1

000009f2 <.L19>:
        }
        if(percentage < 0)
     9f2:	89 81       	ldd	r24, Y+1	; 0x01
     9f4:	9a 81       	ldd	r25, Y+2	; 0x02
     9f6:	99 23       	and	r25, r25
     9f8:	b4 f4       	brge	.+44     	; 0xa26 <.L20>

000009fa <.Loc.103>:
        {
            OCR5A = 0;
     9fa:	88 e2       	ldi	r24, 0x28	; 40
     9fc:	91 e0       	ldi	r25, 0x01	; 1

000009fe <.Loc.104>:
     9fe:	fc 01       	movw	r30, r24
     a00:	11 82       	std	Z+1, r1	; 0x01
     a02:	10 82       	st	Z, r1

00000a04 <.Loc.105>:
            OCR5B = 512*percentage/-100;
     a04:	89 81       	ldd	r24, Y+1	; 0x01
     a06:	9a 81       	ldd	r25, Y+2	; 0x02
     a08:	98 2f       	mov	r25, r24
     a0a:	88 27       	eor	r24, r24
     a0c:	99 0f       	add	r25, r25

00000a0e <.Loc.106>:
     a0e:	2c e9       	ldi	r18, 0x9C	; 156
     a10:	3f ef       	ldi	r19, 0xFF	; 255
     a12:	b9 01       	movw	r22, r18
     a14:	0e 94 07 0a 	call	0x140e	; 0x140e <__divmodhi4>
     a18:	cb 01       	movw	r24, r22
     a1a:	9c 01       	movw	r18, r24

00000a1c <.Loc.107>:
     a1c:	8a e2       	ldi	r24, 0x2A	; 42
     a1e:	91 e0       	ldi	r25, 0x01	; 1

00000a20 <.Loc.108>:
     a20:	fc 01       	movw	r30, r24
     a22:	31 83       	std	Z+1, r19	; 0x01
     a24:	20 83       	st	Z, r18

00000a26 <.L20>:
        }
        if(percentage == 0)
     a26:	89 81       	ldd	r24, Y+1	; 0x01
     a28:	9a 81       	ldd	r25, Y+2	; 0x02
     a2a:	00 97       	sbiw	r24, 0x00	; 0
     a2c:	51 f4       	brne	.+20     	; 0xa42 <.L21>

00000a2e <.Loc.110>:
        {
            OCR5A = 0;
     a2e:	88 e2       	ldi	r24, 0x28	; 40
     a30:	91 e0       	ldi	r25, 0x01	; 1

00000a32 <.Loc.111>:
     a32:	fc 01       	movw	r30, r24
     a34:	11 82       	std	Z+1, r1	; 0x01
     a36:	10 82       	st	Z, r1

00000a38 <.Loc.112>:
            OCR5B = 0;
     a38:	8a e2       	ldi	r24, 0x2A	; 42
     a3a:	91 e0       	ldi	r25, 0x01	; 1

00000a3c <.Loc.113>:
     a3c:	fc 01       	movw	r30, r24
     a3e:	11 82       	std	Z+1, r1	; 0x01
     a40:	10 82       	st	Z, r1

00000a42 <.L21>:
        }
    }
}
     a42:	00 00       	nop
     a44:	0f 90       	pop	r0
     a46:	0f 90       	pop	r0
     a48:	df 91       	pop	r29
     a4a:	cf 91       	pop	r28
     a4c:	08 95       	ret

00000a4e <control_x>:

void control_x(int8_t mode, int16_t position)
{
     a4e:	cf 93       	push	r28
     a50:	df 93       	push	r29
     a52:	00 d0       	rcall	.+0      	; 0xa54 <L0^A>

00000a54 <L0^A>:
     a54:	00 d0       	rcall	.+0      	; 0xa56 <L0^A>

00000a56 <L0^A>:
     a56:	00 d0       	rcall	.+0      	; 0xa58 <L0^A>

00000a58 <L0^A>:
     a58:	0f 92       	push	r0
     a5a:	cd b7       	in	r28, 0x3d	; 61
     a5c:	de b7       	in	r29, 0x3e	; 62
     a5e:	88 87       	std	Y+8, r24	; 0x08
     a60:	7a 87       	std	Y+10, r23	; 0x0a
     a62:	69 87       	std	Y+9, r22	; 0x09

00000a64 <.Loc.116>:
    static int16_t current_pos = 0;
    static int16_t target_pos = 0;
    static int16_t stationary_pos = 0;

    if(mode == 0) //update positie
     a64:	88 85       	ldd	r24, Y+8	; 0x08
     a66:	88 23       	and	r24, r24
     a68:	39 f4       	brne	.+14     	; 0xa78 <.L23>

00000a6a <.Loc.117>:
    {
        current_pos = position;
     a6a:	89 85       	ldd	r24, Y+9	; 0x09
     a6c:	9a 85       	ldd	r25, Y+10	; 0x0a
     a6e:	90 93 1d 02 	sts	0x021D, r25	; 0x80021d <current_pos.8+0x1>
     a72:	80 93 1c 02 	sts	0x021C, r24	; 0x80021c <current_pos.8>
     a76:	16 c0       	rjmp	.+44     	; 0xaa4 <.L24>

00000a78 <.L23>:
    }
    else if(mode == 1) //update target
     a78:	88 85       	ldd	r24, Y+8	; 0x08
     a7a:	81 30       	cpi	r24, 0x01	; 1
     a7c:	39 f4       	brne	.+14     	; 0xa8c <.L25>

00000a7e <.Loc.119>:
    {
        target_pos = position;
     a7e:	89 85       	ldd	r24, Y+9	; 0x09
     a80:	9a 85       	ldd	r25, Y+10	; 0x0a
     a82:	90 93 1f 02 	sts	0x021F, r25	; 0x80021f <target_pos.7+0x1>
     a86:	80 93 1e 02 	sts	0x021E, r24	; 0x80021e <target_pos.7>
     a8a:	0c c0       	rjmp	.+24     	; 0xaa4 <.L24>

00000a8c <.L25>:
    }
    else
    {
        current_pos = position;
     a8c:	89 85       	ldd	r24, Y+9	; 0x09
     a8e:	9a 85       	ldd	r25, Y+10	; 0x0a
     a90:	90 93 1d 02 	sts	0x021D, r25	; 0x80021d <current_pos.8+0x1>
     a94:	80 93 1c 02 	sts	0x021C, r24	; 0x80021c <current_pos.8>

00000a98 <.Loc.121>:
        target_pos = position;
     a98:	89 85       	ldd	r24, Y+9	; 0x09
     a9a:	9a 85       	ldd	r25, Y+10	; 0x0a
     a9c:	90 93 1f 02 	sts	0x021F, r25	; 0x80021f <target_pos.7+0x1>
     aa0:	80 93 1e 02 	sts	0x021E, r24	; 0x80021e <target_pos.7>

00000aa4 <.L24>:
    }
    int16_t error = target_pos - current_pos;
     aa4:	20 91 1e 02 	lds	r18, 0x021E	; 0x80021e <target_pos.7>
     aa8:	30 91 1f 02 	lds	r19, 0x021F	; 0x80021f <target_pos.7+0x1>
     aac:	80 91 1c 02 	lds	r24, 0x021C	; 0x80021c <current_pos.8>
     ab0:	90 91 1d 02 	lds	r25, 0x021D	; 0x80021d <current_pos.8+0x1>

00000ab4 <.Loc.123>:
     ab4:	a9 01       	movw	r20, r18
     ab6:	48 1b       	sub	r20, r24
     ab8:	59 0b       	sbc	r21, r25
     aba:	ca 01       	movw	r24, r20
     abc:	9b 83       	std	Y+3, r25	; 0x03
     abe:	8a 83       	std	Y+2, r24	; 0x02

00000ac0 <.Loc.124>:

    int8_t direction;
    if(error >= 0)
     ac0:	8a 81       	ldd	r24, Y+2	; 0x02
     ac2:	9b 81       	ldd	r25, Y+3	; 0x03
     ac4:	99 23       	and	r25, r25
     ac6:	1c f0       	brlt	.+6      	; 0xace <.L26>

00000ac8 <.Loc.125>:
    {
        direction = 1;
     ac8:	81 e0       	ldi	r24, 0x01	; 1
     aca:	89 83       	std	Y+1, r24	; 0x01
     acc:	02 c0       	rjmp	.+4      	; 0xad2 <.L27>

00000ace <.L26>:
    }
    else
    {
        direction = -1;
     ace:	8f ef       	ldi	r24, 0xFF	; 255
     ad0:	89 83       	std	Y+1, r24	; 0x01

00000ad2 <.L27>:
    }

    int16_t abserror = sabs16(error);
     ad2:	8a 81       	ldd	r24, Y+2	; 0x02
     ad4:	9b 81       	ldd	r25, Y+3	; 0x03
     ad6:	0e 94 65 03 	call	0x6ca	; 0x6ca <sabs16>
     ada:	9d 83       	std	Y+5, r25	; 0x05
     adc:	8c 83       	std	Y+4, r24	; 0x04

00000ade <.Loc.128>:

    int16_t error_stationary = sabs16(current_pos-stationary_pos);
     ade:	20 91 1c 02 	lds	r18, 0x021C	; 0x80021c <current_pos.8>
     ae2:	30 91 1d 02 	lds	r19, 0x021D	; 0x80021d <current_pos.8+0x1>
     ae6:	80 91 20 02 	lds	r24, 0x0220	; 0x800220 <stationary_pos.6>
     aea:	90 91 21 02 	lds	r25, 0x0221	; 0x800221 <stationary_pos.6+0x1>
     aee:	a9 01       	movw	r20, r18
     af0:	48 1b       	sub	r20, r24
     af2:	59 0b       	sbc	r21, r25
     af4:	ca 01       	movw	r24, r20
     af6:	0e 94 65 03 	call	0x6ca	; 0x6ca <sabs16>
     afa:	9f 83       	std	Y+7, r25	; 0x07
     afc:	8e 83       	std	Y+6, r24	; 0x06

00000afe <.Loc.129>:
    if(abserror < 3)
     afe:	8c 81       	ldd	r24, Y+4	; 0x04
     b00:	9d 81       	ldd	r25, Y+5	; 0x05
     b02:	82 30       	cpi	r24, 0x02	; 2
     b04:	91 05       	cpc	r25, r1
     b06:	09 f0       	breq	.+2      	; 0xb0a <.Loc.130>

00000b08 <L0^A>:
     b08:	6c f4       	brge	.+26     	; 0xb24 <.L28>

00000b0a <.Loc.130>:
    {
        stationary_pos = current_pos;
     b0a:	80 91 1c 02 	lds	r24, 0x021C	; 0x80021c <current_pos.8>
     b0e:	90 91 1d 02 	lds	r25, 0x021D	; 0x80021d <current_pos.8+0x1>
     b12:	90 93 21 02 	sts	0x0221, r25	; 0x800221 <stationary_pos.6+0x1>
     b16:	80 93 20 02 	sts	0x0220, r24	; 0x800220 <stationary_pos.6>

00000b1a <.Loc.131>:
        motor_speed_x(0);
     b1a:	80 e0       	ldi	r24, 0x00	; 0
     b1c:	90 e0       	ldi	r25, 0x00	; 0
     b1e:	0e 94 0a 04 	call	0x814	; 0x814 <motor_speed_x>

00000b22 <.Loc.132>:
        else
        {
            motor_speed_x(direction*50);
        }
    }
}
     b22:	4b c0       	rjmp	.+150    	; 0xbba <.L33>

00000b24 <.L28>:
        if(abserror < 10)//laatste 7mm
     b24:	8c 81       	ldd	r24, Y+4	; 0x04
     b26:	9d 81       	ldd	r25, Y+5	; 0x05
     b28:	89 30       	cpi	r24, 0x09	; 9
     b2a:	91 05       	cpc	r25, r1
     b2c:	09 f0       	breq	.+2      	; 0xb30 <.Loc.134>

00000b2e <L0^A>:
     b2e:	84 f4       	brge	.+32     	; 0xb50 <.L30>

00000b30 <.Loc.134>:
            motor_speed_x(direction*10);
     b30:	89 81       	ldd	r24, Y+1	; 0x01
     b32:	28 2f       	mov	r18, r24
     b34:	88 0f       	add	r24, r24
     b36:	33 0b       	sbc	r19, r19
     b38:	c9 01       	movw	r24, r18
     b3a:	88 0f       	add	r24, r24
     b3c:	99 1f       	adc	r25, r25
     b3e:	88 0f       	add	r24, r24
     b40:	99 1f       	adc	r25, r25
     b42:	82 0f       	add	r24, r18
     b44:	93 1f       	adc	r25, r19
     b46:	88 0f       	add	r24, r24
     b48:	99 1f       	adc	r25, r25
     b4a:	0e 94 0a 04 	call	0x814	; 0x814 <motor_speed_x>

00000b4e <.Loc.135>:
}
     b4e:	35 c0       	rjmp	.+106    	; 0xbba <.L33>

00000b50 <.L30>:
        else if(error_stationary<50)//opstarten
     b50:	8e 81       	ldd	r24, Y+6	; 0x06
     b52:	9f 81       	ldd	r25, Y+7	; 0x07
     b54:	81 33       	cpi	r24, 0x31	; 49
     b56:	91 05       	cpc	r25, r1
     b58:	09 f0       	breq	.+2      	; 0xb5c <.Loc.137>

00000b5a <L0^A>:
     b5a:	74 f4       	brge	.+28     	; 0xb78 <.L31>

00000b5c <.Loc.137>:
            motor_speed_x(direction*20);
     b5c:	89 81       	ldd	r24, Y+1	; 0x01
     b5e:	08 2e       	mov	r0, r24
     b60:	00 0c       	add	r0, r0
     b62:	99 0b       	sbc	r25, r25
     b64:	44 e1       	ldi	r20, 0x14	; 20
     b66:	48 9f       	mul	r20, r24
     b68:	90 01       	movw	r18, r0
     b6a:	49 9f       	mul	r20, r25
     b6c:	30 0d       	add	r19, r0
     b6e:	11 24       	eor	r1, r1
     b70:	c9 01       	movw	r24, r18
     b72:	0e 94 0a 04 	call	0x814	; 0x814 <motor_speed_x>

00000b76 <.Loc.138>:
}
     b76:	21 c0       	rjmp	.+66     	; 0xbba <.L33>

00000b78 <.L31>:
        else if(abserror < 30)
     b78:	8c 81       	ldd	r24, Y+4	; 0x04
     b7a:	9d 81       	ldd	r25, Y+5	; 0x05
     b7c:	8d 31       	cpi	r24, 0x1D	; 29
     b7e:	91 05       	cpc	r25, r1
     b80:	09 f0       	breq	.+2      	; 0xb84 <.Loc.140>

00000b82 <L0^A>:
     b82:	74 f4       	brge	.+28     	; 0xba0 <.L32>

00000b84 <.Loc.140>:
            motor_speed_x(direction*20);
     b84:	89 81       	ldd	r24, Y+1	; 0x01
     b86:	08 2e       	mov	r0, r24
     b88:	00 0c       	add	r0, r0
     b8a:	99 0b       	sbc	r25, r25
     b8c:	44 e1       	ldi	r20, 0x14	; 20
     b8e:	48 9f       	mul	r20, r24
     b90:	90 01       	movw	r18, r0
     b92:	49 9f       	mul	r20, r25
     b94:	30 0d       	add	r19, r0
     b96:	11 24       	eor	r1, r1
     b98:	c9 01       	movw	r24, r18
     b9a:	0e 94 0a 04 	call	0x814	; 0x814 <motor_speed_x>

00000b9e <.Loc.141>:
}
     b9e:	0d c0       	rjmp	.+26     	; 0xbba <.L33>

00000ba0 <.L32>:
            motor_speed_x(direction*50);
     ba0:	89 81       	ldd	r24, Y+1	; 0x01
     ba2:	08 2e       	mov	r0, r24
     ba4:	00 0c       	add	r0, r0
     ba6:	99 0b       	sbc	r25, r25
     ba8:	42 e3       	ldi	r20, 0x32	; 50
     baa:	48 9f       	mul	r20, r24
     bac:	90 01       	movw	r18, r0
     bae:	49 9f       	mul	r20, r25
     bb0:	30 0d       	add	r19, r0
     bb2:	11 24       	eor	r1, r1
     bb4:	c9 01       	movw	r24, r18
     bb6:	0e 94 0a 04 	call	0x814	; 0x814 <motor_speed_x>

00000bba <.L33>:
}
     bba:	00 00       	nop
     bbc:	2a 96       	adiw	r28, 0x0a	; 10
     bbe:	0f b6       	in	r0, 0x3f	; 63
     bc0:	f8 94       	cli
     bc2:	de bf       	out	0x3e, r29	; 62
     bc4:	0f be       	out	0x3f, r0	; 63
     bc6:	cd bf       	out	0x3d, r28	; 61
     bc8:	df 91       	pop	r29
     bca:	cf 91       	pop	r28
     bcc:	08 95       	ret

00000bce <control_y>:

void control_y(int8_t mode, int16_t position)
{
     bce:	cf 93       	push	r28
     bd0:	df 93       	push	r29
     bd2:	00 d0       	rcall	.+0      	; 0xbd4 <L0^A>

00000bd4 <L0^A>:
     bd4:	00 d0       	rcall	.+0      	; 0xbd6 <L0^A>

00000bd6 <L0^A>:
     bd6:	00 d0       	rcall	.+0      	; 0xbd8 <L0^A>

00000bd8 <L0^A>:
     bd8:	0f 92       	push	r0
     bda:	cd b7       	in	r28, 0x3d	; 61
     bdc:	de b7       	in	r29, 0x3e	; 62
     bde:	88 87       	std	Y+8, r24	; 0x08
     be0:	7a 87       	std	Y+10, r23	; 0x0a
     be2:	69 87       	std	Y+9, r22	; 0x09

00000be4 <.Loc.145>:
    static int16_t current_pos = 0;
    static int16_t target_pos = 0;
    static int16_t stationary_pos = 0;

    if(mode == 0) //update positie
     be4:	88 85       	ldd	r24, Y+8	; 0x08
     be6:	88 23       	and	r24, r24
     be8:	39 f4       	brne	.+14     	; 0xbf8 <.L35>

00000bea <.Loc.146>:
    {
        current_pos = position;
     bea:	89 85       	ldd	r24, Y+9	; 0x09
     bec:	9a 85       	ldd	r25, Y+10	; 0x0a
     bee:	90 93 23 02 	sts	0x0223, r25	; 0x800223 <current_pos.5+0x1>
     bf2:	80 93 22 02 	sts	0x0222, r24	; 0x800222 <current_pos.5>
     bf6:	16 c0       	rjmp	.+44     	; 0xc24 <.L36>

00000bf8 <.L35>:
    }
    else if(mode == 1) //update target
     bf8:	88 85       	ldd	r24, Y+8	; 0x08
     bfa:	81 30       	cpi	r24, 0x01	; 1
     bfc:	39 f4       	brne	.+14     	; 0xc0c <.L37>

00000bfe <.Loc.148>:
    {
        target_pos = position;
     bfe:	89 85       	ldd	r24, Y+9	; 0x09
     c00:	9a 85       	ldd	r25, Y+10	; 0x0a
     c02:	90 93 25 02 	sts	0x0225, r25	; 0x800225 <target_pos.4+0x1>
     c06:	80 93 24 02 	sts	0x0224, r24	; 0x800224 <target_pos.4>
     c0a:	0c c0       	rjmp	.+24     	; 0xc24 <.L36>

00000c0c <.L37>:
    }
    else//update both (init)
    {
        current_pos = position;
     c0c:	89 85       	ldd	r24, Y+9	; 0x09
     c0e:	9a 85       	ldd	r25, Y+10	; 0x0a
     c10:	90 93 23 02 	sts	0x0223, r25	; 0x800223 <current_pos.5+0x1>
     c14:	80 93 22 02 	sts	0x0222, r24	; 0x800222 <current_pos.5>

00000c18 <.Loc.150>:
        target_pos = position;
     c18:	89 85       	ldd	r24, Y+9	; 0x09
     c1a:	9a 85       	ldd	r25, Y+10	; 0x0a
     c1c:	90 93 25 02 	sts	0x0225, r25	; 0x800225 <target_pos.4+0x1>
     c20:	80 93 24 02 	sts	0x0224, r24	; 0x800224 <target_pos.4>

00000c24 <.L36>:
    }
    int16_t error = target_pos - current_pos;
     c24:	20 91 24 02 	lds	r18, 0x0224	; 0x800224 <target_pos.4>
     c28:	30 91 25 02 	lds	r19, 0x0225	; 0x800225 <target_pos.4+0x1>
     c2c:	80 91 22 02 	lds	r24, 0x0222	; 0x800222 <current_pos.5>
     c30:	90 91 23 02 	lds	r25, 0x0223	; 0x800223 <current_pos.5+0x1>

00000c34 <.Loc.152>:
     c34:	a9 01       	movw	r20, r18
     c36:	48 1b       	sub	r20, r24
     c38:	59 0b       	sbc	r21, r25
     c3a:	ca 01       	movw	r24, r20
     c3c:	9b 83       	std	Y+3, r25	; 0x03
     c3e:	8a 83       	std	Y+2, r24	; 0x02

00000c40 <.Loc.153>:

    int8_t direction;
    if(error >= 0)
     c40:	8a 81       	ldd	r24, Y+2	; 0x02
     c42:	9b 81       	ldd	r25, Y+3	; 0x03
     c44:	99 23       	and	r25, r25
     c46:	1c f0       	brlt	.+6      	; 0xc4e <.L38>

00000c48 <.Loc.154>:
    {
        direction = 1;
     c48:	81 e0       	ldi	r24, 0x01	; 1
     c4a:	89 83       	std	Y+1, r24	; 0x01
     c4c:	02 c0       	rjmp	.+4      	; 0xc52 <.L39>

00000c4e <.L38>:
    }
    else
    {
        direction = -1;
     c4e:	8f ef       	ldi	r24, 0xFF	; 255
     c50:	89 83       	std	Y+1, r24	; 0x01

00000c52 <.L39>:
    }

    int16_t abserror = sabs16(error);
     c52:	8a 81       	ldd	r24, Y+2	; 0x02
     c54:	9b 81       	ldd	r25, Y+3	; 0x03
     c56:	0e 94 65 03 	call	0x6ca	; 0x6ca <sabs16>
     c5a:	9d 83       	std	Y+5, r25	; 0x05
     c5c:	8c 83       	std	Y+4, r24	; 0x04

00000c5e <.Loc.157>:

    int16_t error_stationary = sabs16(current_pos-stationary_pos);
     c5e:	20 91 22 02 	lds	r18, 0x0222	; 0x800222 <current_pos.5>
     c62:	30 91 23 02 	lds	r19, 0x0223	; 0x800223 <current_pos.5+0x1>
     c66:	80 91 26 02 	lds	r24, 0x0226	; 0x800226 <stationary_pos.3>
     c6a:	90 91 27 02 	lds	r25, 0x0227	; 0x800227 <stationary_pos.3+0x1>
     c6e:	a9 01       	movw	r20, r18
     c70:	48 1b       	sub	r20, r24
     c72:	59 0b       	sbc	r21, r25
     c74:	ca 01       	movw	r24, r20
     c76:	0e 94 65 03 	call	0x6ca	; 0x6ca <sabs16>
     c7a:	9f 83       	std	Y+7, r25	; 0x07
     c7c:	8e 83       	std	Y+6, r24	; 0x06

00000c7e <.Loc.158>:
    if(abserror < 3)
     c7e:	8c 81       	ldd	r24, Y+4	; 0x04
     c80:	9d 81       	ldd	r25, Y+5	; 0x05
     c82:	82 30       	cpi	r24, 0x02	; 2
     c84:	91 05       	cpc	r25, r1
     c86:	09 f0       	breq	.+2      	; 0xc8a <.Loc.159>

00000c88 <L0^A>:
     c88:	6c f4       	brge	.+26     	; 0xca4 <.L40>

00000c8a <.Loc.159>:
    {
        stationary_pos = current_pos;
     c8a:	80 91 22 02 	lds	r24, 0x0222	; 0x800222 <current_pos.5>
     c8e:	90 91 23 02 	lds	r25, 0x0223	; 0x800223 <current_pos.5+0x1>
     c92:	90 93 27 02 	sts	0x0227, r25	; 0x800227 <stationary_pos.3+0x1>
     c96:	80 93 26 02 	sts	0x0226, r24	; 0x800226 <stationary_pos.3>

00000c9a <.Loc.160>:
        motor_speed_y(0);
     c9a:	80 e0       	ldi	r24, 0x00	; 0
     c9c:	90 e0       	ldi	r25, 0x00	; 0
     c9e:	0e 94 69 04 	call	0x8d2	; 0x8d2 <motor_speed_y>

00000ca2 <.Loc.161>:
        else
        {
            motor_speed_y(direction*80);
        }
    }
}
     ca2:	5f c0       	rjmp	.+190    	; 0xd62 <.L46>

00000ca4 <.L40>:
        if(abserror < 10)//laatste 7mm
     ca4:	8c 81       	ldd	r24, Y+4	; 0x04
     ca6:	9d 81       	ldd	r25, Y+5	; 0x05
     ca8:	89 30       	cpi	r24, 0x09	; 9
     caa:	91 05       	cpc	r25, r1
     cac:	09 f0       	breq	.+2      	; 0xcb0 <.Loc.163>

00000cae <L0^A>:
     cae:	84 f4       	brge	.+32     	; 0xcd0 <.L42>

00000cb0 <.Loc.163>:
            motor_speed_y(direction*10);
     cb0:	89 81       	ldd	r24, Y+1	; 0x01
     cb2:	28 2f       	mov	r18, r24
     cb4:	88 0f       	add	r24, r24
     cb6:	33 0b       	sbc	r19, r19
     cb8:	c9 01       	movw	r24, r18
     cba:	88 0f       	add	r24, r24
     cbc:	99 1f       	adc	r25, r25
     cbe:	88 0f       	add	r24, r24
     cc0:	99 1f       	adc	r25, r25
     cc2:	82 0f       	add	r24, r18
     cc4:	93 1f       	adc	r25, r19
     cc6:	88 0f       	add	r24, r24
     cc8:	99 1f       	adc	r25, r25
     cca:	0e 94 69 04 	call	0x8d2	; 0x8d2 <motor_speed_y>

00000cce <.Loc.164>:
}
     cce:	49 c0       	rjmp	.+146    	; 0xd62 <.L46>

00000cd0 <.L42>:
        else if(error_stationary<50)//opstarten
     cd0:	8e 81       	ldd	r24, Y+6	; 0x06
     cd2:	9f 81       	ldd	r25, Y+7	; 0x07
     cd4:	81 33       	cpi	r24, 0x31	; 49
     cd6:	91 05       	cpc	r25, r1
     cd8:	09 f0       	breq	.+2      	; 0xcdc <.Loc.166>

00000cda <L0^A>:
     cda:	74 f4       	brge	.+28     	; 0xcf8 <.L43>

00000cdc <.Loc.166>:
            motor_speed_y(direction*20);
     cdc:	89 81       	ldd	r24, Y+1	; 0x01
     cde:	08 2e       	mov	r0, r24
     ce0:	00 0c       	add	r0, r0
     ce2:	99 0b       	sbc	r25, r25
     ce4:	44 e1       	ldi	r20, 0x14	; 20
     ce6:	48 9f       	mul	r20, r24
     ce8:	90 01       	movw	r18, r0
     cea:	49 9f       	mul	r20, r25
     cec:	30 0d       	add	r19, r0
     cee:	11 24       	eor	r1, r1
     cf0:	c9 01       	movw	r24, r18
     cf2:	0e 94 69 04 	call	0x8d2	; 0x8d2 <motor_speed_y>

00000cf6 <.Loc.167>:
}
     cf6:	35 c0       	rjmp	.+106    	; 0xd62 <.L46>

00000cf8 <.L43>:
        else if(abserror < 30)
     cf8:	8c 81       	ldd	r24, Y+4	; 0x04
     cfa:	9d 81       	ldd	r25, Y+5	; 0x05
     cfc:	8d 31       	cpi	r24, 0x1D	; 29
     cfe:	91 05       	cpc	r25, r1
     d00:	09 f0       	breq	.+2      	; 0xd04 <.Loc.169>

00000d02 <L0^A>:
     d02:	74 f4       	brge	.+28     	; 0xd20 <.L44>

00000d04 <.Loc.169>:
            motor_speed_y(direction*20);
     d04:	89 81       	ldd	r24, Y+1	; 0x01
     d06:	08 2e       	mov	r0, r24
     d08:	00 0c       	add	r0, r0
     d0a:	99 0b       	sbc	r25, r25
     d0c:	44 e1       	ldi	r20, 0x14	; 20
     d0e:	48 9f       	mul	r20, r24
     d10:	90 01       	movw	r18, r0
     d12:	49 9f       	mul	r20, r25
     d14:	30 0d       	add	r19, r0
     d16:	11 24       	eor	r1, r1
     d18:	c9 01       	movw	r24, r18
     d1a:	0e 94 69 04 	call	0x8d2	; 0x8d2 <motor_speed_y>

00000d1e <.Loc.170>:
}
     d1e:	21 c0       	rjmp	.+66     	; 0xd62 <.L46>

00000d20 <.L44>:
        else if(abserror < 100)
     d20:	8c 81       	ldd	r24, Y+4	; 0x04
     d22:	9d 81       	ldd	r25, Y+5	; 0x05
     d24:	83 36       	cpi	r24, 0x63	; 99
     d26:	91 05       	cpc	r25, r1
     d28:	09 f0       	breq	.+2      	; 0xd2c <.Loc.172>

00000d2a <L0^A>:
     d2a:	74 f4       	brge	.+28     	; 0xd48 <.L45>

00000d2c <.Loc.172>:
            motor_speed_y(direction*50);
     d2c:	89 81       	ldd	r24, Y+1	; 0x01
     d2e:	08 2e       	mov	r0, r24
     d30:	00 0c       	add	r0, r0
     d32:	99 0b       	sbc	r25, r25
     d34:	42 e3       	ldi	r20, 0x32	; 50
     d36:	48 9f       	mul	r20, r24
     d38:	90 01       	movw	r18, r0
     d3a:	49 9f       	mul	r20, r25
     d3c:	30 0d       	add	r19, r0
     d3e:	11 24       	eor	r1, r1
     d40:	c9 01       	movw	r24, r18
     d42:	0e 94 69 04 	call	0x8d2	; 0x8d2 <motor_speed_y>

00000d46 <.Loc.173>:
}
     d46:	0d c0       	rjmp	.+26     	; 0xd62 <.L46>

00000d48 <.L45>:
            motor_speed_y(direction*80);
     d48:	89 81       	ldd	r24, Y+1	; 0x01
     d4a:	08 2e       	mov	r0, r24
     d4c:	00 0c       	add	r0, r0
     d4e:	99 0b       	sbc	r25, r25
     d50:	40 e5       	ldi	r20, 0x50	; 80
     d52:	48 9f       	mul	r20, r24
     d54:	90 01       	movw	r18, r0
     d56:	49 9f       	mul	r20, r25
     d58:	30 0d       	add	r19, r0
     d5a:	11 24       	eor	r1, r1
     d5c:	c9 01       	movw	r24, r18
     d5e:	0e 94 69 04 	call	0x8d2	; 0x8d2 <motor_speed_y>

00000d62 <.L46>:
}
     d62:	00 00       	nop
     d64:	2a 96       	adiw	r28, 0x0a	; 10
     d66:	0f b6       	in	r0, 0x3f	; 63
     d68:	f8 94       	cli
     d6a:	de bf       	out	0x3e, r29	; 62
     d6c:	0f be       	out	0x3f, r0	; 63
     d6e:	cd bf       	out	0x3d, r28	; 61
     d70:	df 91       	pop	r29
     d72:	cf 91       	pop	r28
     d74:	08 95       	ret

00000d76 <control_z>:

void control_z(int8_t mode, int16_t position)
{
     d76:	cf 93       	push	r28
     d78:	df 93       	push	r29
     d7a:	00 d0       	rcall	.+0      	; 0xd7c <L0^A>

00000d7c <L0^A>:
     d7c:	00 d0       	rcall	.+0      	; 0xd7e <L0^A>

00000d7e <L0^A>:
     d7e:	00 d0       	rcall	.+0      	; 0xd80 <L0^A>

00000d80 <L0^A>:
     d80:	0f 92       	push	r0
     d82:	cd b7       	in	r28, 0x3d	; 61
     d84:	de b7       	in	r29, 0x3e	; 62
     d86:	88 87       	std	Y+8, r24	; 0x08
     d88:	7a 87       	std	Y+10, r23	; 0x0a
     d8a:	69 87       	std	Y+9, r22	; 0x09

00000d8c <.Loc.177>:
    static int16_t current_pos = 0;
    static int16_t target_pos = 0;
    static int16_t stationary_pos = 0;

    if(mode == 0) //update positie
     d8c:	88 85       	ldd	r24, Y+8	; 0x08
     d8e:	88 23       	and	r24, r24
     d90:	39 f4       	brne	.+14     	; 0xda0 <.L48>

00000d92 <.Loc.178>:
    {
        current_pos = position;
     d92:	89 85       	ldd	r24, Y+9	; 0x09
     d94:	9a 85       	ldd	r25, Y+10	; 0x0a
     d96:	90 93 29 02 	sts	0x0229, r25	; 0x800229 <current_pos.2+0x1>
     d9a:	80 93 28 02 	sts	0x0228, r24	; 0x800228 <current_pos.2>
     d9e:	16 c0       	rjmp	.+44     	; 0xdcc <.L49>

00000da0 <.L48>:
    }
    else if(mode == 1) //update target
     da0:	88 85       	ldd	r24, Y+8	; 0x08
     da2:	81 30       	cpi	r24, 0x01	; 1
     da4:	39 f4       	brne	.+14     	; 0xdb4 <.L50>

00000da6 <.Loc.180>:
    {
        target_pos = position;
     da6:	89 85       	ldd	r24, Y+9	; 0x09
     da8:	9a 85       	ldd	r25, Y+10	; 0x0a
     daa:	90 93 2b 02 	sts	0x022B, r25	; 0x80022b <target_pos.1+0x1>
     dae:	80 93 2a 02 	sts	0x022A, r24	; 0x80022a <target_pos.1>
     db2:	0c c0       	rjmp	.+24     	; 0xdcc <.L49>

00000db4 <.L50>:
    }
    else
    {
        current_pos = position;
     db4:	89 85       	ldd	r24, Y+9	; 0x09
     db6:	9a 85       	ldd	r25, Y+10	; 0x0a
     db8:	90 93 29 02 	sts	0x0229, r25	; 0x800229 <current_pos.2+0x1>
     dbc:	80 93 28 02 	sts	0x0228, r24	; 0x800228 <current_pos.2>

00000dc0 <.Loc.182>:
        target_pos = position;
     dc0:	89 85       	ldd	r24, Y+9	; 0x09
     dc2:	9a 85       	ldd	r25, Y+10	; 0x0a
     dc4:	90 93 2b 02 	sts	0x022B, r25	; 0x80022b <target_pos.1+0x1>
     dc8:	80 93 2a 02 	sts	0x022A, r24	; 0x80022a <target_pos.1>

00000dcc <.L49>:
    }
    int16_t error = target_pos - current_pos;
     dcc:	20 91 2a 02 	lds	r18, 0x022A	; 0x80022a <target_pos.1>
     dd0:	30 91 2b 02 	lds	r19, 0x022B	; 0x80022b <target_pos.1+0x1>
     dd4:	80 91 28 02 	lds	r24, 0x0228	; 0x800228 <current_pos.2>
     dd8:	90 91 29 02 	lds	r25, 0x0229	; 0x800229 <current_pos.2+0x1>

00000ddc <.Loc.184>:
     ddc:	a9 01       	movw	r20, r18
     dde:	48 1b       	sub	r20, r24
     de0:	59 0b       	sbc	r21, r25
     de2:	ca 01       	movw	r24, r20
     de4:	9b 83       	std	Y+3, r25	; 0x03
     de6:	8a 83       	std	Y+2, r24	; 0x02

00000de8 <.Loc.185>:

    int8_t direction;
    if(error >= 0)
     de8:	8a 81       	ldd	r24, Y+2	; 0x02
     dea:	9b 81       	ldd	r25, Y+3	; 0x03
     dec:	99 23       	and	r25, r25
     dee:	1c f0       	brlt	.+6      	; 0xdf6 <.L51>

00000df0 <.Loc.186>:
    {
        direction = 1;
     df0:	81 e0       	ldi	r24, 0x01	; 1
     df2:	89 83       	std	Y+1, r24	; 0x01
     df4:	02 c0       	rjmp	.+4      	; 0xdfa <.L52>

00000df6 <.L51>:
    }
    else
    {
        direction = -1;
     df6:	8f ef       	ldi	r24, 0xFF	; 255
     df8:	89 83       	std	Y+1, r24	; 0x01

00000dfa <.L52>:
    }

    int16_t abserror = sabs16(error);
     dfa:	8a 81       	ldd	r24, Y+2	; 0x02
     dfc:	9b 81       	ldd	r25, Y+3	; 0x03
     dfe:	0e 94 65 03 	call	0x6ca	; 0x6ca <sabs16>
     e02:	9d 83       	std	Y+5, r25	; 0x05
     e04:	8c 83       	std	Y+4, r24	; 0x04

00000e06 <.Loc.189>:

    int16_t error_stationary = sabs16(current_pos-stationary_pos);
     e06:	20 91 28 02 	lds	r18, 0x0228	; 0x800228 <current_pos.2>
     e0a:	30 91 29 02 	lds	r19, 0x0229	; 0x800229 <current_pos.2+0x1>
     e0e:	80 91 2c 02 	lds	r24, 0x022C	; 0x80022c <stationary_pos.0>
     e12:	90 91 2d 02 	lds	r25, 0x022D	; 0x80022d <stationary_pos.0+0x1>
     e16:	a9 01       	movw	r20, r18
     e18:	48 1b       	sub	r20, r24
     e1a:	59 0b       	sbc	r21, r25
     e1c:	ca 01       	movw	r24, r20
     e1e:	0e 94 65 03 	call	0x6ca	; 0x6ca <sabs16>
     e22:	9f 83       	std	Y+7, r25	; 0x07
     e24:	8e 83       	std	Y+6, r24	; 0x06

00000e26 <.Loc.190>:
    if(abserror < 3)
     e26:	8c 81       	ldd	r24, Y+4	; 0x04
     e28:	9d 81       	ldd	r25, Y+5	; 0x05
     e2a:	82 30       	cpi	r24, 0x02	; 2
     e2c:	91 05       	cpc	r25, r1
     e2e:	09 f0       	breq	.+2      	; 0xe32 <.Loc.191>

00000e30 <L0^A>:
     e30:	6c f4       	brge	.+26     	; 0xe4c <.L53>

00000e32 <.Loc.191>:
    {
        stationary_pos = current_pos;
     e32:	80 91 28 02 	lds	r24, 0x0228	; 0x800228 <current_pos.2>
     e36:	90 91 29 02 	lds	r25, 0x0229	; 0x800229 <current_pos.2+0x1>
     e3a:	90 93 2d 02 	sts	0x022D, r25	; 0x80022d <stationary_pos.0+0x1>
     e3e:	80 93 2c 02 	sts	0x022C, r24	; 0x80022c <stationary_pos.0>

00000e42 <.Loc.192>:
        motor_speed_y(0);
     e42:	80 e0       	ldi	r24, 0x00	; 0
     e44:	90 e0       	ldi	r25, 0x00	; 0
     e46:	0e 94 69 04 	call	0x8d2	; 0x8d2 <motor_speed_y>

00000e4a <.Loc.193>:
        else
        {
            motor_speed_y(direction*80);
        }
    }
}
     e4a:	49 c0       	rjmp	.+146    	; 0xede <.L58>

00000e4c <.L53>:
        if(abserror < 10)//laatste 7mm
     e4c:	8c 81       	ldd	r24, Y+4	; 0x04
     e4e:	9d 81       	ldd	r25, Y+5	; 0x05
     e50:	89 30       	cpi	r24, 0x09	; 9
     e52:	91 05       	cpc	r25, r1
     e54:	09 f0       	breq	.+2      	; 0xe58 <.Loc.195>

00000e56 <L0^A>:
     e56:	74 f4       	brge	.+28     	; 0xe74 <.L55>

00000e58 <.Loc.195>:
            motor_speed_y(direction*30);
     e58:	89 81       	ldd	r24, Y+1	; 0x01
     e5a:	08 2e       	mov	r0, r24
     e5c:	00 0c       	add	r0, r0
     e5e:	99 0b       	sbc	r25, r25
     e60:	4e e1       	ldi	r20, 0x1E	; 30
     e62:	48 9f       	mul	r20, r24
     e64:	90 01       	movw	r18, r0
     e66:	49 9f       	mul	r20, r25
     e68:	30 0d       	add	r19, r0
     e6a:	11 24       	eor	r1, r1
     e6c:	c9 01       	movw	r24, r18
     e6e:	0e 94 69 04 	call	0x8d2	; 0x8d2 <motor_speed_y>

00000e72 <.Loc.196>:
}
     e72:	35 c0       	rjmp	.+106    	; 0xede <.L58>

00000e74 <.L55>:
        else if(error_stationary<50)//opstarten
     e74:	8e 81       	ldd	r24, Y+6	; 0x06
     e76:	9f 81       	ldd	r25, Y+7	; 0x07
     e78:	81 33       	cpi	r24, 0x31	; 49
     e7a:	91 05       	cpc	r25, r1
     e7c:	09 f0       	breq	.+2      	; 0xe80 <.Loc.198>

00000e7e <L0^A>:
     e7e:	74 f4       	brge	.+28     	; 0xe9c <.L56>

00000e80 <.Loc.198>:
            motor_speed_y(direction*100);
     e80:	89 81       	ldd	r24, Y+1	; 0x01
     e82:	08 2e       	mov	r0, r24
     e84:	00 0c       	add	r0, r0
     e86:	99 0b       	sbc	r25, r25
     e88:	44 e6       	ldi	r20, 0x64	; 100
     e8a:	48 9f       	mul	r20, r24
     e8c:	90 01       	movw	r18, r0
     e8e:	49 9f       	mul	r20, r25
     e90:	30 0d       	add	r19, r0
     e92:	11 24       	eor	r1, r1
     e94:	c9 01       	movw	r24, r18
     e96:	0e 94 69 04 	call	0x8d2	; 0x8d2 <motor_speed_y>

00000e9a <.Loc.199>:
}
     e9a:	21 c0       	rjmp	.+66     	; 0xede <.L58>

00000e9c <.L56>:
        else if(abserror < 30)
     e9c:	8c 81       	ldd	r24, Y+4	; 0x04
     e9e:	9d 81       	ldd	r25, Y+5	; 0x05
     ea0:	8d 31       	cpi	r24, 0x1D	; 29
     ea2:	91 05       	cpc	r25, r1
     ea4:	09 f0       	breq	.+2      	; 0xea8 <.Loc.201>

00000ea6 <L0^A>:
     ea6:	74 f4       	brge	.+28     	; 0xec4 <.L57>

00000ea8 <.Loc.201>:
            motor_speed_y(direction*50);
     ea8:	89 81       	ldd	r24, Y+1	; 0x01
     eaa:	08 2e       	mov	r0, r24
     eac:	00 0c       	add	r0, r0
     eae:	99 0b       	sbc	r25, r25
     eb0:	42 e3       	ldi	r20, 0x32	; 50
     eb2:	48 9f       	mul	r20, r24
     eb4:	90 01       	movw	r18, r0
     eb6:	49 9f       	mul	r20, r25
     eb8:	30 0d       	add	r19, r0
     eba:	11 24       	eor	r1, r1
     ebc:	c9 01       	movw	r24, r18
     ebe:	0e 94 69 04 	call	0x8d2	; 0x8d2 <motor_speed_y>

00000ec2 <.Loc.202>:
}
     ec2:	0d c0       	rjmp	.+26     	; 0xede <.L58>

00000ec4 <.L57>:
            motor_speed_y(direction*80);
     ec4:	89 81       	ldd	r24, Y+1	; 0x01
     ec6:	08 2e       	mov	r0, r24
     ec8:	00 0c       	add	r0, r0
     eca:	99 0b       	sbc	r25, r25
     ecc:	40 e5       	ldi	r20, 0x50	; 80
     ece:	48 9f       	mul	r20, r24
     ed0:	90 01       	movw	r18, r0
     ed2:	49 9f       	mul	r20, r25
     ed4:	30 0d       	add	r19, r0
     ed6:	11 24       	eor	r1, r1
     ed8:	c9 01       	movw	r24, r18
     eda:	0e 94 69 04 	call	0x8d2	; 0x8d2 <motor_speed_y>

00000ede <.L58>:
}
     ede:	00 00       	nop
     ee0:	2a 96       	adiw	r28, 0x0a	; 10
     ee2:	0f b6       	in	r0, 0x3f	; 63
     ee4:	f8 94       	cli
     ee6:	de bf       	out	0x3e, r29	; 62
     ee8:	0f be       	out	0x3f, r0	; 63
     eea:	cd bf       	out	0x3d, r28	; 61
     eec:	df 91       	pop	r29
     eee:	cf 91       	pop	r28
     ef0:	08 95       	ret

00000ef2 <main>:
#include "kraan_positie.h"
#include "rx_tx.h"


int main(void)
{
     ef2:	cf 93       	push	r28
     ef4:	df 93       	push	r29
     ef6:	cd b7       	in	r28, 0x3d	; 61
     ef8:	de b7       	in	r29, 0x3e	; 62
     efa:	a2 97       	sbiw	r28, 0x22	; 34
     efc:	0f b6       	in	r0, 0x3f	; 63
     efe:	f8 94       	cli
     f00:	de bf       	out	0x3e, r29	; 62
     f02:	0f be       	out	0x3f, r0	; 63
     f04:	cd bf       	out	0x3d, r28	; 61

00000f06 <.Loc.1>:
    //init alles
    init_time();
     f06:	0e 94 93 02 	call	0x526	; 0x526 <init_time>

00000f0a <.Loc.2>:
    init_io();
     f0a:	0e 94 88 00 	call	0x110	; 0x110 <init_io>

00000f0e <.Loc.3>:
    init_motors();
     f0e:	0e 94 8a 03 	call	0x714	; 0x714 <init_motors>

00000f12 <.Loc.4>:
    init_RXTX();
     f12:	0e 94 ab 09 	call	0x1356	; 0x1356 <init_RXTX>

00000f16 <.Loc.5>:

    while(new_recieve_data == 0)
     f16:	8f c0       	rjmp	.+286    	; 0x1036 <.L2>

00000f18 <.L11>:
     f18:	80 e0       	ldi	r24, 0x00	; 0
     f1a:	90 e0       	ldi	r25, 0x00	; 0
     f1c:	a0 e8       	ldi	r26, 0x80	; 128
     f1e:	bf e3       	ldi	r27, 0x3F	; 63
     f20:	89 83       	std	Y+1, r24	; 0x01
     f22:	9a 83       	std	Y+2, r25	; 0x02
     f24:	ab 83       	std	Y+3, r26	; 0x03
     f26:	bc 83       	std	Y+4, r27	; 0x04

00000f28 <.LBB12>:

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
     f28:	20 e0       	ldi	r18, 0x00	; 0
     f2a:	30 e0       	ldi	r19, 0x00	; 0
     f2c:	4a e7       	ldi	r20, 0x7A	; 122
     f2e:	55 e4       	ldi	r21, 0x45	; 69
     f30:	69 81       	ldd	r22, Y+1	; 0x01
     f32:	7a 81       	ldd	r23, Y+2	; 0x02
     f34:	8b 81       	ldd	r24, Y+3	; 0x03
     f36:	9c 81       	ldd	r25, Y+4	; 0x04
     f38:	0e 94 ca 0a 	call	0x1594	; 0x1594 <__mulsf3>
     f3c:	6b 8b       	std	Y+19, r22	; 0x13
     f3e:	7c 8b       	std	Y+20, r23	; 0x14
     f40:	8d 8b       	std	Y+21, r24	; 0x15
     f42:	9e 8b       	std	Y+22, r25	; 0x16
     f44:	8b 89       	ldd	r24, Y+19	; 0x13
     f46:	9c 89       	ldd	r25, Y+20	; 0x14
     f48:	ad 89       	ldd	r26, Y+21	; 0x15
     f4a:	be 89       	ldd	r27, Y+22	; 0x16
     f4c:	8d 83       	std	Y+5, r24	; 0x05
     f4e:	9e 83       	std	Y+6, r25	; 0x06
     f50:	af 83       	std	Y+7, r26	; 0x07
     f52:	b8 87       	std	Y+8, r27	; 0x08

00000f54 <.Loc.7>:
	if (__tmp < 1.0)
     f54:	20 e0       	ldi	r18, 0x00	; 0
     f56:	30 e0       	ldi	r19, 0x00	; 0
     f58:	40 e8       	ldi	r20, 0x80	; 128
     f5a:	5f e3       	ldi	r21, 0x3F	; 63
     f5c:	6d 81       	ldd	r22, Y+5	; 0x05
     f5e:	7e 81       	ldd	r23, Y+6	; 0x06
     f60:	8f 81       	ldd	r24, Y+7	; 0x07
     f62:	98 85       	ldd	r25, Y+8	; 0x08
     f64:	0e 94 44 0a 	call	0x1488	; 0x1488 <__cmpsf2>
     f68:	88 23       	and	r24, r24
     f6a:	2c f4       	brge	.+10     	; 0xf76 <.L17>

00000f6c <.Loc.8>:
		__ticks = 1;
     f6c:	81 e0       	ldi	r24, 0x01	; 1
     f6e:	90 e0       	ldi	r25, 0x00	; 0
     f70:	9a 87       	std	Y+10, r25	; 0x0a
     f72:	89 87       	std	Y+9, r24	; 0x09
     f74:	55 c0       	rjmp	.+170    	; 0x1020 <.L5>

00000f76 <.L17>:
	else if (__tmp > 65535)
     f76:	20 e0       	ldi	r18, 0x00	; 0
     f78:	3f ef       	ldi	r19, 0xFF	; 255
     f7a:	4f e7       	ldi	r20, 0x7F	; 127
     f7c:	57 e4       	ldi	r21, 0x47	; 71
     f7e:	6d 81       	ldd	r22, Y+5	; 0x05
     f80:	7e 81       	ldd	r23, Y+6	; 0x06
     f82:	8f 81       	ldd	r24, Y+7	; 0x07
     f84:	98 85       	ldd	r25, Y+8	; 0x08
     f86:	0e 94 c5 0a 	call	0x158a	; 0x158a <__gesf2>
     f8a:	88 23       	and	r24, r24
     f8c:	d9 f1       	breq	.+118    	; 0x1004 <.L18>
     f8e:	d4 f1       	brlt	.+116    	; 0x1004 <.L18>

00000f90 <.Loc.10>:
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     f90:	20 e0       	ldi	r18, 0x00	; 0
     f92:	30 e0       	ldi	r19, 0x00	; 0
     f94:	40 e2       	ldi	r20, 0x20	; 32
     f96:	51 e4       	ldi	r21, 0x41	; 65
     f98:	69 81       	ldd	r22, Y+1	; 0x01
     f9a:	7a 81       	ldd	r23, Y+2	; 0x02
     f9c:	8b 81       	ldd	r24, Y+3	; 0x03
     f9e:	9c 81       	ldd	r25, Y+4	; 0x04
     fa0:	0e 94 ca 0a 	call	0x1594	; 0x1594 <__mulsf3>
     fa4:	6f 8b       	std	Y+23, r22	; 0x17
     fa6:	78 8f       	std	Y+24, r23	; 0x18
     fa8:	89 8f       	std	Y+25, r24	; 0x19
     faa:	9a 8f       	std	Y+26, r25	; 0x1a
     fac:	8f 89       	ldd	r24, Y+23	; 0x17
     fae:	98 8d       	ldd	r25, Y+24	; 0x18
     fb0:	a9 8d       	ldd	r26, Y+25	; 0x19
     fb2:	ba 8d       	ldd	r27, Y+26	; 0x1a
     fb4:	8f 87       	std	Y+15, r24	; 0x0f
     fb6:	98 8b       	std	Y+16, r25	; 0x10
     fb8:	a9 8b       	std	Y+17, r26	; 0x11
     fba:	ba 8b       	std	Y+18, r27	; 0x12

00000fbc <.Loc.11>:
     fbc:	6f 85       	ldd	r22, Y+15	; 0x0f
     fbe:	78 89       	ldd	r23, Y+16	; 0x10
     fc0:	89 89       	ldd	r24, Y+17	; 0x11
     fc2:	9a 89       	ldd	r25, Y+18	; 0x12
     fc4:	0e 94 49 0a 	call	0x1492	; 0x1492 <__fixunssfsi>
     fc8:	6b 8f       	std	Y+27, r22	; 0x1b
     fca:	7c 8f       	std	Y+28, r23	; 0x1c
     fcc:	8d 8f       	std	Y+29, r24	; 0x1d
     fce:	9e 8f       	std	Y+30, r25	; 0x1e
     fd0:	ab 8d       	ldd	r26, Y+27	; 0x1b
     fd2:	bc 8d       	ldd	r27, Y+28	; 0x1c
     fd4:	ba 87       	std	Y+10, r27	; 0x0a
     fd6:	a9 87       	std	Y+9, r26	; 0x09

00000fd8 <.Loc.12>:
		while(__ticks)
     fd8:	10 c0       	rjmp	.+32     	; 0xffa <.L8>

00000fda <.L9>:
     fda:	80 e9       	ldi	r24, 0x90	; 144
     fdc:	91 e0       	ldi	r25, 0x01	; 1
     fde:	9c 87       	std	Y+12, r25	; 0x0c
     fe0:	8b 87       	std	Y+11, r24	; 0x0b

00000fe2 <.LBB14>:
		"sbc %B0,__zero_reg__"    "\n\t"
		"brne 1b"
		: "+d" (__count)
	);
#else
	__asm__ volatile (
     fe2:	8b 85       	ldd	r24, Y+11	; 0x0b
     fe4:	9c 85       	ldd	r25, Y+12	; 0x0c

00000fe6 <.L1^B1>:
     fe6:	01 97       	sbiw	r24, 0x01	; 1
     fe8:	f1 f7       	brne	.-4      	; 0xfe6 <.L1^B1>
     fea:	9c 87       	std	Y+12, r25	; 0x0c
     fec:	8b 87       	std	Y+11, r24	; 0x0b

00000fee <.Loc.14>:
	...

00000ff0 <.LBE14>:
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     ff0:	89 85       	ldd	r24, Y+9	; 0x09
     ff2:	9a 85       	ldd	r25, Y+10	; 0x0a
     ff4:	01 97       	sbiw	r24, 0x01	; 1
     ff6:	9a 87       	std	Y+10, r25	; 0x0a
     ff8:	89 87       	std	Y+9, r24	; 0x09

00000ffa <.L8>:
		while(__ticks)
     ffa:	89 85       	ldd	r24, Y+9	; 0x09
     ffc:	9a 85       	ldd	r25, Y+10	; 0x0a
     ffe:	00 97       	sbiw	r24, 0x00	; 0
    1000:	61 f7       	brne	.-40     	; 0xfda <.L9>

00001002 <.Loc.17>:
		}
		return;
    1002:	19 c0       	rjmp	.+50     	; 0x1036 <.L2>

00001004 <.L18>:
	}
	else
		__ticks = (uint16_t)__tmp;
    1004:	6d 81       	ldd	r22, Y+5	; 0x05
    1006:	7e 81       	ldd	r23, Y+6	; 0x06
    1008:	8f 81       	ldd	r24, Y+7	; 0x07
    100a:	98 85       	ldd	r25, Y+8	; 0x08
    100c:	0e 94 49 0a 	call	0x1492	; 0x1492 <__fixunssfsi>
    1010:	6f 8f       	std	Y+31, r22	; 0x1f
    1012:	78 a3       	std	Y+32, r23	; 0x20
    1014:	89 a3       	std	Y+33, r24	; 0x21
    1016:	9a a3       	std	Y+34, r25	; 0x22
    1018:	8f 8d       	ldd	r24, Y+31	; 0x1f
    101a:	98 a1       	ldd	r25, Y+32	; 0x20
    101c:	9a 87       	std	Y+10, r25	; 0x0a
    101e:	89 87       	std	Y+9, r24	; 0x09

00001020 <.L5>:
    1020:	89 85       	ldd	r24, Y+9	; 0x09
    1022:	9a 85       	ldd	r25, Y+10	; 0x0a
    1024:	9e 87       	std	Y+14, r25	; 0x0e
    1026:	8d 87       	std	Y+13, r24	; 0x0d

00001028 <.LBB16>:
    1028:	8d 85       	ldd	r24, Y+13	; 0x0d
    102a:	9e 85       	ldd	r25, Y+14	; 0x0e

0000102c <.L1^B2>:
    102c:	01 97       	sbiw	r24, 0x01	; 1
    102e:	f1 f7       	brne	.-4      	; 0x102c <.L1^B2>
    1030:	9e 87       	std	Y+14, r25	; 0x0e
    1032:	8d 87       	std	Y+13, r24	; 0x0d

00001034 <.Loc.20>:
	...

00001036 <.L2>:
    1036:	80 91 2e 02 	lds	r24, 0x022E	; 0x80022e <new_recieve_data>
    103a:	88 23       	and	r24, r24
    103c:	09 f4       	brne	.+2      	; 0x1040 <.Loc.22>

0000103e <L0^A>:
    103e:	6c cf       	rjmp	.-296    	; 0xf18 <.L11>

00001040 <.Loc.22>:
    {
        _delay_ms(1);
    }
    control_x(2, ((recieve_message[2])|(recieve_message[3]<<8)));
    1040:	80 91 31 02 	lds	r24, 0x0231	; 0x800231 <recieve_message+0x2>
    1044:	28 2f       	mov	r18, r24
    1046:	30 e0       	ldi	r19, 0x00	; 0

00001048 <.Loc.23>:
    1048:	80 91 32 02 	lds	r24, 0x0232	; 0x800232 <recieve_message+0x3>
    104c:	88 2f       	mov	r24, r24
    104e:	90 e0       	ldi	r25, 0x00	; 0

00001050 <.Loc.24>:
    1050:	98 2f       	mov	r25, r24
    1052:	88 27       	eor	r24, r24

00001054 <.Loc.25>:
    1054:	82 2b       	or	r24, r18
    1056:	93 2b       	or	r25, r19
    1058:	bc 01       	movw	r22, r24
    105a:	82 e0       	ldi	r24, 0x02	; 2
    105c:	0e 94 27 05 	call	0xa4e	; 0xa4e <control_x>

00001060 <.Loc.26>:
    control_y(2, ((recieve_message[4])|(recieve_message[5]<<8)));
    1060:	80 91 33 02 	lds	r24, 0x0233	; 0x800233 <recieve_message+0x4>
    1064:	28 2f       	mov	r18, r24
    1066:	30 e0       	ldi	r19, 0x00	; 0

00001068 <.Loc.27>:
    1068:	80 91 34 02 	lds	r24, 0x0234	; 0x800234 <recieve_message+0x5>
    106c:	88 2f       	mov	r24, r24
    106e:	90 e0       	ldi	r25, 0x00	; 0

00001070 <.Loc.28>:
    1070:	98 2f       	mov	r25, r24
    1072:	88 27       	eor	r24, r24

00001074 <.Loc.29>:
    1074:	82 2b       	or	r24, r18
    1076:	93 2b       	or	r25, r19
    1078:	bc 01       	movw	r22, r24
    107a:	82 e0       	ldi	r24, 0x02	; 2
    107c:	0e 94 e7 05 	call	0xbce	; 0xbce <control_y>

00001080 <.Loc.30>:
    control_z(2, ((recieve_message[6])|(recieve_message[7]<<8)));
    1080:	80 91 35 02 	lds	r24, 0x0235	; 0x800235 <recieve_message+0x6>
    1084:	28 2f       	mov	r18, r24
    1086:	30 e0       	ldi	r19, 0x00	; 0

00001088 <.Loc.31>:
    1088:	80 91 36 02 	lds	r24, 0x0236	; 0x800236 <recieve_message+0x7>
    108c:	88 2f       	mov	r24, r24
    108e:	90 e0       	ldi	r25, 0x00	; 0

00001090 <.Loc.32>:
    1090:	98 2f       	mov	r25, r24
    1092:	88 27       	eor	r24, r24

00001094 <.Loc.33>:
    1094:	82 2b       	or	r24, r18
    1096:	93 2b       	or	r25, r19
    1098:	bc 01       	movw	r22, r24
    109a:	82 e0       	ldi	r24, 0x02	; 2
    109c:	0e 94 bb 06 	call	0xd76	; 0xd76 <control_z>

000010a0 <.Loc.34>:
    new_recieve_data = 0;
    10a0:	10 92 2e 02 	sts	0x022E, r1	; 0x80022e <new_recieve_data>

000010a4 <.L14>:
    while(1)
    {
        bio_kraan_enable(2);
    10a4:	82 e0       	ldi	r24, 0x02	; 2
    10a6:	90 e0       	ldi	r25, 0x00	; 0
    10a8:	0e 94 ab 00 	call	0x156	; 0x156 <bio_kraan_enable>

000010ac <.Loc.36>:
        bio_kraan_load_unload(2);
    10ac:	82 e0       	ldi	r24, 0x02	; 2
    10ae:	90 e0       	ldi	r25, 0x00	; 0
    10b0:	0e 94 9f 01 	call	0x33e	; 0x33e <bio_kraan_load_unload>

000010b4 <.Loc.37>:
        if(new_recieve_data)
    10b4:	80 91 2e 02 	lds	r24, 0x022E	; 0x80022e <new_recieve_data>

000010b8 <.Loc.38>:
    10b8:	88 23       	and	r24, r24
    10ba:	a1 f3       	breq	.-24     	; 0x10a4 <.L14>

000010bc <.Loc.39>:
        {
            new_recieve_data = 0;
    10bc:	10 92 2e 02 	sts	0x022E, r1	; 0x80022e <new_recieve_data>

000010c0 <.Loc.40>:
            if(recieve_message[1] == 1)
    10c0:	80 91 30 02 	lds	r24, 0x0230	; 0x800230 <recieve_message+0x1>

000010c4 <.Loc.41>:
    10c4:	81 30       	cpi	r24, 0x01	; 1
    10c6:	89 f5       	brne	.+98     	; 0x112a <.L13>

000010c8 <.Loc.42>:
            {//update position
                control_x(0, ((recieve_message[2])|(recieve_message[3]<<8)));
    10c8:	80 91 31 02 	lds	r24, 0x0231	; 0x800231 <recieve_message+0x2>
    10cc:	28 2f       	mov	r18, r24
    10ce:	30 e0       	ldi	r19, 0x00	; 0

000010d0 <.Loc.43>:
    10d0:	80 91 32 02 	lds	r24, 0x0232	; 0x800232 <recieve_message+0x3>
    10d4:	88 2f       	mov	r24, r24
    10d6:	90 e0       	ldi	r25, 0x00	; 0

000010d8 <.Loc.44>:
    10d8:	98 2f       	mov	r25, r24
    10da:	88 27       	eor	r24, r24

000010dc <.Loc.45>:
    10dc:	82 2b       	or	r24, r18
    10de:	93 2b       	or	r25, r19
    10e0:	bc 01       	movw	r22, r24
    10e2:	80 e0       	ldi	r24, 0x00	; 0
    10e4:	0e 94 27 05 	call	0xa4e	; 0xa4e <control_x>

000010e8 <.Loc.46>:
                control_y(0, ((recieve_message[4])|(recieve_message[5]<<8)));
    10e8:	80 91 33 02 	lds	r24, 0x0233	; 0x800233 <recieve_message+0x4>
    10ec:	28 2f       	mov	r18, r24
    10ee:	30 e0       	ldi	r19, 0x00	; 0

000010f0 <.Loc.47>:
    10f0:	80 91 34 02 	lds	r24, 0x0234	; 0x800234 <recieve_message+0x5>
    10f4:	88 2f       	mov	r24, r24
    10f6:	90 e0       	ldi	r25, 0x00	; 0

000010f8 <.Loc.48>:
    10f8:	98 2f       	mov	r25, r24
    10fa:	88 27       	eor	r24, r24

000010fc <.Loc.49>:
    10fc:	82 2b       	or	r24, r18
    10fe:	93 2b       	or	r25, r19
    1100:	bc 01       	movw	r22, r24
    1102:	80 e0       	ldi	r24, 0x00	; 0
    1104:	0e 94 e7 05 	call	0xbce	; 0xbce <control_y>

00001108 <.Loc.50>:
                control_z(0, ((recieve_message[6])|(recieve_message[7]<<8)));
    1108:	80 91 35 02 	lds	r24, 0x0235	; 0x800235 <recieve_message+0x6>
    110c:	28 2f       	mov	r18, r24
    110e:	30 e0       	ldi	r19, 0x00	; 0

00001110 <.Loc.51>:
    1110:	80 91 36 02 	lds	r24, 0x0236	; 0x800236 <recieve_message+0x7>
    1114:	88 2f       	mov	r24, r24
    1116:	90 e0       	ldi	r25, 0x00	; 0

00001118 <.Loc.52>:
    1118:	98 2f       	mov	r25, r24
    111a:	88 27       	eor	r24, r24

0000111c <.Loc.53>:
    111c:	82 2b       	or	r24, r18
    111e:	93 2b       	or	r25, r19
    1120:	bc 01       	movw	r22, r24
    1122:	80 e0       	ldi	r24, 0x00	; 0
    1124:	0e 94 bb 06 	call	0xd76	; 0xd76 <control_z>
    1128:	bd cf       	rjmp	.-134    	; 0x10a4 <.L14>

0000112a <.L13>:
            }
            else if(recieve_message [1] == 2)
    112a:	80 91 30 02 	lds	r24, 0x0230	; 0x800230 <recieve_message+0x1>

0000112e <.Loc.55>:
    112e:	82 30       	cpi	r24, 0x02	; 2
    1130:	09 f0       	breq	.+2      	; 0x1134 <.Loc.56>

00001132 <L0^A>:
    1132:	b8 cf       	rjmp	.-144    	; 0x10a4 <.L14>

00001134 <.Loc.56>:
            {
                control_x(1, ((recieve_message[2])|(recieve_message[3]<<8)));
    1134:	80 91 31 02 	lds	r24, 0x0231	; 0x800231 <recieve_message+0x2>
    1138:	28 2f       	mov	r18, r24
    113a:	30 e0       	ldi	r19, 0x00	; 0

0000113c <.Loc.57>:
    113c:	80 91 32 02 	lds	r24, 0x0232	; 0x800232 <recieve_message+0x3>
    1140:	88 2f       	mov	r24, r24
    1142:	90 e0       	ldi	r25, 0x00	; 0

00001144 <.Loc.58>:
    1144:	98 2f       	mov	r25, r24
    1146:	88 27       	eor	r24, r24

00001148 <.Loc.59>:
    1148:	82 2b       	or	r24, r18
    114a:	93 2b       	or	r25, r19
    114c:	bc 01       	movw	r22, r24
    114e:	81 e0       	ldi	r24, 0x01	; 1
    1150:	0e 94 27 05 	call	0xa4e	; 0xa4e <control_x>

00001154 <.Loc.60>:
                control_y(1, ((recieve_message[4])|(recieve_message[5]<<8)));
    1154:	80 91 33 02 	lds	r24, 0x0233	; 0x800233 <recieve_message+0x4>
    1158:	28 2f       	mov	r18, r24
    115a:	30 e0       	ldi	r19, 0x00	; 0

0000115c <.Loc.61>:
    115c:	80 91 34 02 	lds	r24, 0x0234	; 0x800234 <recieve_message+0x5>
    1160:	88 2f       	mov	r24, r24
    1162:	90 e0       	ldi	r25, 0x00	; 0

00001164 <.Loc.62>:
    1164:	98 2f       	mov	r25, r24
    1166:	88 27       	eor	r24, r24

00001168 <.Loc.63>:
    1168:	82 2b       	or	r24, r18
    116a:	93 2b       	or	r25, r19
    116c:	bc 01       	movw	r22, r24
    116e:	81 e0       	ldi	r24, 0x01	; 1
    1170:	0e 94 e7 05 	call	0xbce	; 0xbce <control_y>

00001174 <.Loc.64>:
                control_z(1, ((recieve_message[6])|(recieve_message[7]<<8)));
    1174:	80 91 35 02 	lds	r24, 0x0235	; 0x800235 <recieve_message+0x6>
    1178:	28 2f       	mov	r18, r24
    117a:	30 e0       	ldi	r19, 0x00	; 0

0000117c <.Loc.65>:
    117c:	80 91 36 02 	lds	r24, 0x0236	; 0x800236 <recieve_message+0x7>
    1180:	88 2f       	mov	r24, r24
    1182:	90 e0       	ldi	r25, 0x00	; 0

00001184 <.Loc.66>:
    1184:	98 2f       	mov	r25, r24
    1186:	88 27       	eor	r24, r24

00001188 <.Loc.67>:
    1188:	82 2b       	or	r24, r18
    118a:	93 2b       	or	r25, r19
    118c:	bc 01       	movw	r22, r24
    118e:	81 e0       	ldi	r24, 0x01	; 1
    1190:	0e 94 bb 06 	call	0xd76	; 0xd76 <control_z>

00001194 <.Loc.68>:
        bio_kraan_enable(2);
    1194:	87 cf       	rjmp	.-242    	; 0x10a4 <.L14>

00001196 <__vector_26>:
//USART0_UDRE_vect
//USART0_RX_vect
//USART0_TX_vect

ISR(USART0_UDRE_vect) //UDR empty
{
    1196:	1f 92       	push	r1
    1198:	0f 92       	push	r0
    119a:	0f b6       	in	r0, 0x3f	; 63
    119c:	0f 92       	push	r0
    119e:	11 24       	eor	r1, r1
    11a0:	0b b6       	in	r0, 0x3b	; 59
    11a2:	0f 92       	push	r0
    11a4:	2f 93       	push	r18
    11a6:	3f 93       	push	r19
    11a8:	8f 93       	push	r24
    11aa:	9f 93       	push	r25
    11ac:	ef 93       	push	r30
    11ae:	ff 93       	push	r31
    11b0:	cf 93       	push	r28
    11b2:	df 93       	push	r29
    11b4:	cd b7       	in	r28, 0x3d	; 61
    11b6:	de b7       	in	r29, 0x3e	; 62

000011b8 <.Loc.1>:
    static uint8_t writer_position = 0;
    UDR0 = transmit_message[writer_position];
    11b8:	80 91 44 02 	lds	r24, 0x0244	; 0x800244 <writer_position.2>
    11bc:	28 2f       	mov	r18, r24
    11be:	30 e0       	ldi	r19, 0x00	; 0

000011c0 <.Loc.2>:
    11c0:	86 ec       	ldi	r24, 0xC6	; 198
    11c2:	90 e0       	ldi	r25, 0x00	; 0

000011c4 <.Loc.3>:
    11c4:	27 5c       	subi	r18, 0xC7	; 199
    11c6:	3d 4f       	sbci	r19, 0xFD	; 253
    11c8:	f9 01       	movw	r30, r18
    11ca:	20 81       	ld	r18, Z

000011cc <.Loc.4>:
    11cc:	fc 01       	movw	r30, r24
    11ce:	20 83       	st	Z, r18

000011d0 <.Loc.5>:
    if ((transmit_message[writer_position] == end_byte) ||(writer_position > 9))
    11d0:	80 91 44 02 	lds	r24, 0x0244	; 0x800244 <writer_position.2>
    11d4:	88 2f       	mov	r24, r24
    11d6:	90 e0       	ldi	r25, 0x00	; 0
    11d8:	87 5c       	subi	r24, 0xC7	; 199
    11da:	9d 4f       	sbci	r25, 0xFD	; 253
    11dc:	fc 01       	movw	r30, r24
    11de:	80 81       	ld	r24, Z

000011e0 <.Loc.6>:
    11e0:	81 32       	cpi	r24, 0x21	; 33
    11e2:	29 f0       	breq	.+10     	; 0x11ee <.L2>

000011e4 <.Loc.7>:
    11e4:	80 91 44 02 	lds	r24, 0x0244	; 0x800244 <writer_position.2>

000011e8 <.Loc.8>:
    11e8:	89 30       	cpi	r24, 0x09	; 9
    11ea:	79 f0       	breq	.+30     	; 0x120a <.L3>
    11ec:	70 f0       	brcs	.+28     	; 0x120a <.L3>

000011ee <.L2>:
    {

        writer_position = 0;
    11ee:	10 92 44 02 	sts	0x0244, r1	; 0x800244 <writer_position.2>

000011f2 <.Loc.10>:
        UCSR0B &= ~(1<<UDRIE0);
    11f2:	81 ec       	ldi	r24, 0xC1	; 193
    11f4:	90 e0       	ldi	r25, 0x00	; 0
    11f6:	fc 01       	movw	r30, r24
    11f8:	20 81       	ld	r18, Z

000011fa <.Loc.11>:
    11fa:	81 ec       	ldi	r24, 0xC1	; 193
    11fc:	90 e0       	ldi	r25, 0x00	; 0

000011fe <.Loc.12>:
    11fe:	2f 7d       	andi	r18, 0xDF	; 223
    1200:	fc 01       	movw	r30, r24
    1202:	20 83       	st	Z, r18

00001204 <.Loc.13>:
        transmiting_data = 0;
    1204:	10 92 43 02 	sts	0x0243, r1	; 0x800243 <transmiting_data>
    1208:	06 c0       	rjmp	.+12     	; 0x1216 <.L4>

0000120a <.L3>:
    }
    else
    {
        writer_position++;
    120a:	80 91 44 02 	lds	r24, 0x0244	; 0x800244 <writer_position.2>
    120e:	8f 5f       	subi	r24, 0xFF	; 255
    1210:	80 93 44 02 	sts	0x0244, r24	; 0x800244 <writer_position.2>

00001214 <.Loc.15>:
	...

00001216 <.L4>:
    }
}
    1216:	00 00       	nop
    1218:	df 91       	pop	r29
    121a:	cf 91       	pop	r28
    121c:	ff 91       	pop	r31
    121e:	ef 91       	pop	r30
    1220:	9f 91       	pop	r25
    1222:	8f 91       	pop	r24
    1224:	3f 91       	pop	r19
    1226:	2f 91       	pop	r18
    1228:	0f 90       	pop	r0
    122a:	0b be       	out	0x3b, r0	; 59
    122c:	0f 90       	pop	r0
    122e:	0f be       	out	0x3f, r0	; 63
    1230:	0f 90       	pop	r0
    1232:	1f 90       	pop	r1
    1234:	18 95       	reti

00001236 <__vector_25>:

ISR(USART0_RX_vect) //recievemsg
{
    1236:	1f 92       	push	r1
    1238:	0f 92       	push	r0
    123a:	0f b6       	in	r0, 0x3f	; 63
    123c:	0f 92       	push	r0
    123e:	11 24       	eor	r1, r1
    1240:	0b b6       	in	r0, 0x3b	; 59
    1242:	0f 92       	push	r0
    1244:	2f 93       	push	r18
    1246:	3f 93       	push	r19
    1248:	8f 93       	push	r24
    124a:	9f 93       	push	r25
    124c:	ef 93       	push	r30
    124e:	ff 93       	push	r31
    1250:	cf 93       	push	r28
    1252:	df 93       	push	r29
    1254:	0f 92       	push	r0
    1256:	0f 92       	push	r0
    1258:	cd b7       	in	r28, 0x3d	; 61
    125a:	de b7       	in	r29, 0x3e	; 62

0000125c <.Loc.17>:
    static uint8_t building_recieve_message[message_length];
    static uint8_t reader_position = 0;
    volatile uint8_t tempbyte = UDR0;
    125c:	86 ec       	ldi	r24, 0xC6	; 198
    125e:	90 e0       	ldi	r25, 0x00	; 0
    1260:	fc 01       	movw	r30, r24
    1262:	80 81       	ld	r24, Z

00001264 <.Loc.18>:
    1264:	8a 83       	std	Y+2, r24	; 0x02

00001266 <.Loc.19>:
    if(tempbyte == start_byte)
    1266:	8a 81       	ldd	r24, Y+2	; 0x02

00001268 <.Loc.20>:
    1268:	8d 3f       	cpi	r24, 0xFD	; 253
    126a:	d1 f4       	brne	.+52     	; 0x12a0 <.L6>

0000126c <.Loc.21>:
    {
        reader_position = 0;
    126c:	10 92 45 02 	sts	0x0245, r1	; 0x800245 <reader_position.1>

00001270 <.Loc.22>:
        PORTB &= ~(1<<D3);
    1270:	85 e2       	ldi	r24, 0x25	; 37
    1272:	90 e0       	ldi	r25, 0x00	; 0
    1274:	fc 01       	movw	r30, r24
    1276:	20 81       	ld	r18, Z

00001278 <.Loc.23>:
    1278:	85 e2       	ldi	r24, 0x25	; 37
    127a:	90 e0       	ldi	r25, 0x00	; 0

0000127c <.Loc.24>:
    127c:	2f 7d       	andi	r18, 0xDF	; 223
    127e:	fc 01       	movw	r30, r24
    1280:	20 83       	st	Z, r18

00001282 <.Loc.25>:
        building_recieve_message[reader_position] = tempbyte;
    1282:	80 91 45 02 	lds	r24, 0x0245	; 0x800245 <reader_position.1>
    1286:	88 2f       	mov	r24, r24
    1288:	90 e0       	ldi	r25, 0x00	; 0

0000128a <.Loc.26>:
    128a:	2a 81       	ldd	r18, Y+2	; 0x02
    128c:	8a 5b       	subi	r24, 0xBA	; 186
    128e:	9d 4f       	sbci	r25, 0xFD	; 253
    1290:	fc 01       	movw	r30, r24
    1292:	20 83       	st	Z, r18

00001294 <.Loc.27>:
        reader_position++;
    1294:	80 91 45 02 	lds	r24, 0x0245	; 0x800245 <reader_position.1>
    1298:	8f 5f       	subi	r24, 0xFF	; 255
    129a:	80 93 45 02 	sts	0x0245, r24	; 0x800245 <reader_position.1>

0000129e <.Loc.28>:
    {
        building_recieve_message[reader_position] = tempbyte;
        reader_position++;
        PORTB &= ~(1<<D2);
    }
}
    129e:	49 c0       	rjmp	.+146    	; 0x1332 <.L11>

000012a0 <.L6>:
    else if(tempbyte == end_byte)
    12a0:	8a 81       	ldd	r24, Y+2	; 0x02

000012a2 <.Loc.30>:
    12a2:	81 32       	cpi	r24, 0x21	; 33
    12a4:	79 f5       	brne	.+94     	; 0x1304 <.L8>

000012a6 <.LBB2>:
        building_recieve_message[reader_position] = tempbyte;
    12a6:	80 91 45 02 	lds	r24, 0x0245	; 0x800245 <reader_position.1>
    12aa:	88 2f       	mov	r24, r24
    12ac:	90 e0       	ldi	r25, 0x00	; 0

000012ae <.Loc.32>:
    12ae:	2a 81       	ldd	r18, Y+2	; 0x02
    12b0:	8a 5b       	subi	r24, 0xBA	; 186
    12b2:	9d 4f       	sbci	r25, 0xFD	; 253
    12b4:	fc 01       	movw	r30, r24
    12b6:	20 83       	st	Z, r18

000012b8 <.Loc.33>:
        uint8_t i = message_length;
    12b8:	8a e0       	ldi	r24, 0x0A	; 10
    12ba:	89 83       	std	Y+1, r24	; 0x01

000012bc <.Loc.34>:
        while(i)
    12bc:	11 c0       	rjmp	.+34     	; 0x12e0 <.L9>

000012be <.L10>:
            i--;
    12be:	89 81       	ldd	r24, Y+1	; 0x01
    12c0:	81 50       	subi	r24, 0x01	; 1
    12c2:	89 83       	std	Y+1, r24	; 0x01

000012c4 <.Loc.36>:
            recieve_message[i] = building_recieve_message[i];
    12c4:	89 81       	ldd	r24, Y+1	; 0x01
    12c6:	28 2f       	mov	r18, r24
    12c8:	30 e0       	ldi	r19, 0x00	; 0

000012ca <.Loc.37>:
    12ca:	89 81       	ldd	r24, Y+1	; 0x01
    12cc:	88 2f       	mov	r24, r24
    12ce:	90 e0       	ldi	r25, 0x00	; 0

000012d0 <.Loc.38>:
    12d0:	2a 5b       	subi	r18, 0xBA	; 186
    12d2:	3d 4f       	sbci	r19, 0xFD	; 253
    12d4:	f9 01       	movw	r30, r18
    12d6:	20 81       	ld	r18, Z

000012d8 <.Loc.39>:
    12d8:	81 5d       	subi	r24, 0xD1	; 209
    12da:	9d 4f       	sbci	r25, 0xFD	; 253
    12dc:	fc 01       	movw	r30, r24
    12de:	20 83       	st	Z, r18

000012e0 <.L9>:
        while(i)
    12e0:	89 81       	ldd	r24, Y+1	; 0x01
    12e2:	88 23       	and	r24, r24
    12e4:	61 f7       	brne	.-40     	; 0x12be <.L10>

000012e6 <.Loc.41>:
        reader_position = 0;
    12e6:	10 92 45 02 	sts	0x0245, r1	; 0x800245 <reader_position.1>

000012ea <.Loc.42>:
        new_recieve_data = 1;
    12ea:	81 e0       	ldi	r24, 0x01	; 1
    12ec:	80 93 2e 02 	sts	0x022E, r24	; 0x80022e <new_recieve_data>

000012f0 <.Loc.43>:
        PORTB &= ~(1<<D4);
    12f0:	85 e2       	ldi	r24, 0x25	; 37
    12f2:	90 e0       	ldi	r25, 0x00	; 0
    12f4:	fc 01       	movw	r30, r24
    12f6:	20 81       	ld	r18, Z

000012f8 <.Loc.44>:
    12f8:	85 e2       	ldi	r24, 0x25	; 37
    12fa:	90 e0       	ldi	r25, 0x00	; 0

000012fc <.Loc.45>:
    12fc:	2f 7e       	andi	r18, 0xEF	; 239
    12fe:	fc 01       	movw	r30, r24
    1300:	20 83       	st	Z, r18

00001302 <.LBE2>:
}
    1302:	17 c0       	rjmp	.+46     	; 0x1332 <.L11>

00001304 <.L8>:
        building_recieve_message[reader_position] = tempbyte;
    1304:	80 91 45 02 	lds	r24, 0x0245	; 0x800245 <reader_position.1>
    1308:	88 2f       	mov	r24, r24
    130a:	90 e0       	ldi	r25, 0x00	; 0

0000130c <.Loc.48>:
    130c:	2a 81       	ldd	r18, Y+2	; 0x02
    130e:	8a 5b       	subi	r24, 0xBA	; 186
    1310:	9d 4f       	sbci	r25, 0xFD	; 253
    1312:	fc 01       	movw	r30, r24
    1314:	20 83       	st	Z, r18

00001316 <.Loc.49>:
        reader_position++;
    1316:	80 91 45 02 	lds	r24, 0x0245	; 0x800245 <reader_position.1>
    131a:	8f 5f       	subi	r24, 0xFF	; 255
    131c:	80 93 45 02 	sts	0x0245, r24	; 0x800245 <reader_position.1>

00001320 <.Loc.50>:
        PORTB &= ~(1<<D2);
    1320:	85 e2       	ldi	r24, 0x25	; 37
    1322:	90 e0       	ldi	r25, 0x00	; 0
    1324:	fc 01       	movw	r30, r24
    1326:	20 81       	ld	r18, Z

00001328 <.Loc.51>:
    1328:	85 e2       	ldi	r24, 0x25	; 37
    132a:	90 e0       	ldi	r25, 0x00	; 0

0000132c <.Loc.52>:
    132c:	2f 7b       	andi	r18, 0xBF	; 191
    132e:	fc 01       	movw	r30, r24
    1330:	20 83       	st	Z, r18

00001332 <.L11>:
}
    1332:	00 00       	nop
    1334:	0f 90       	pop	r0
    1336:	0f 90       	pop	r0
    1338:	df 91       	pop	r29
    133a:	cf 91       	pop	r28
    133c:	ff 91       	pop	r31
    133e:	ef 91       	pop	r30
    1340:	9f 91       	pop	r25
    1342:	8f 91       	pop	r24
    1344:	3f 91       	pop	r19
    1346:	2f 91       	pop	r18
    1348:	0f 90       	pop	r0
    134a:	0b be       	out	0x3b, r0	; 59
    134c:	0f 90       	pop	r0
    134e:	0f be       	out	0x3f, r0	; 63
    1350:	0f 90       	pop	r0
    1352:	1f 90       	pop	r1
    1354:	18 95       	reti

00001356 <init_RXTX>:

void init_RXTX(void)
{
    1356:	cf 93       	push	r28
    1358:	df 93       	push	r29
    135a:	cd b7       	in	r28, 0x3d	; 61
    135c:	de b7       	in	r29, 0x3e	; 62

0000135e <.Loc.55>:
    cli();
    135e:	f8 94       	cli

00001360 <.Loc.56>:
    UBRR0H = (BRC >> 8);
    1360:	85 ec       	ldi	r24, 0xC5	; 197
    1362:	90 e0       	ldi	r25, 0x00	; 0

00001364 <.Loc.57>:
    1364:	fc 01       	movw	r30, r24
    1366:	10 82       	st	Z, r1

00001368 <.Loc.58>:
    UBRR0L = BRC;
    1368:	84 ec       	ldi	r24, 0xC4	; 196
    136a:	90 e0       	ldi	r25, 0x00	; 0

0000136c <.Loc.59>:
    136c:	27 e6       	ldi	r18, 0x67	; 103
    136e:	fc 01       	movw	r30, r24
    1370:	20 83       	st	Z, r18

00001372 <.Loc.60>:
    UCSR0B |= (1<<RXCIE0) | (0<<TXCIE0) | (1<<RXEN0) | (1<<TXEN0);
    1372:	81 ec       	ldi	r24, 0xC1	; 193
    1374:	90 e0       	ldi	r25, 0x00	; 0
    1376:	fc 01       	movw	r30, r24
    1378:	20 81       	ld	r18, Z
    137a:	81 ec       	ldi	r24, 0xC1	; 193
    137c:	90 e0       	ldi	r25, 0x00	; 0

0000137e <.Loc.61>:
    137e:	28 69       	ori	r18, 0x98	; 152
    1380:	fc 01       	movw	r30, r24
    1382:	20 83       	st	Z, r18

00001384 <.Loc.62>:
    UCSR0C |= (1 << UCSZ01) | (1 << UCSZ00);
    1384:	82 ec       	ldi	r24, 0xC2	; 194
    1386:	90 e0       	ldi	r25, 0x00	; 0
    1388:	fc 01       	movw	r30, r24
    138a:	20 81       	ld	r18, Z
    138c:	82 ec       	ldi	r24, 0xC2	; 194
    138e:	90 e0       	ldi	r25, 0x00	; 0

00001390 <.Loc.63>:
    1390:	26 60       	ori	r18, 0x06	; 6
    1392:	fc 01       	movw	r30, r24
    1394:	20 83       	st	Z, r18

00001396 <.Loc.64>:
    sei();
    1396:	78 94       	sei

00001398 <.Loc.65>:
}
    1398:	00 00       	nop
    139a:	df 91       	pop	r29
    139c:	cf 91       	pop	r28
    139e:	08 95       	ret

000013a0 <transmit_data>:

void transmit_data(uint8_t *data)
{
    13a0:	cf 93       	push	r28
    13a2:	df 93       	push	r29
    13a4:	00 d0       	rcall	.+0      	; 0x13a6 <L0^A>

000013a6 <L0^A>:
    13a6:	cd b7       	in	r28, 0x3d	; 61
    13a8:	de b7       	in	r29, 0x3e	; 62
    13aa:	9b 83       	std	Y+3, r25	; 0x03
    13ac:	8a 83       	std	Y+2, r24	; 0x02

000013ae <.Loc.67>:
    if (transmiting_data == 0)
    13ae:	80 91 43 02 	lds	r24, 0x0243	; 0x800243 <transmiting_data>

000013b2 <.Loc.68>:
    13b2:	88 23       	and	r24, r24
    13b4:	29 f5       	brne	.+74     	; 0x1400 <.L17>

000013b6 <.LBB3>:
    {
        transmiting_data = 1;
    13b6:	81 e0       	ldi	r24, 0x01	; 1
    13b8:	80 93 43 02 	sts	0x0243, r24	; 0x800243 <transmiting_data>

000013bc <.Loc.70>:
        uint8_t i = message_length;
    13bc:	8a e0       	ldi	r24, 0x0A	; 10
    13be:	89 83       	std	Y+1, r24	; 0x01

000013c0 <.Loc.71>:
        while(i)
    13c0:	13 c0       	rjmp	.+38     	; 0x13e8 <.L15>

000013c2 <.L16>:
        {
            i--;
    13c2:	89 81       	ldd	r24, Y+1	; 0x01
    13c4:	81 50       	subi	r24, 0x01	; 1
    13c6:	89 83       	std	Y+1, r24	; 0x01

000013c8 <.Loc.73>:
            transmit_message[i] = *(data+i);
    13c8:	89 81       	ldd	r24, Y+1	; 0x01
    13ca:	88 2f       	mov	r24, r24
    13cc:	90 e0       	ldi	r25, 0x00	; 0
    13ce:	2a 81       	ldd	r18, Y+2	; 0x02
    13d0:	3b 81       	ldd	r19, Y+3	; 0x03
    13d2:	28 0f       	add	r18, r24
    13d4:	39 1f       	adc	r19, r25

000013d6 <.Loc.74>:
    13d6:	89 81       	ldd	r24, Y+1	; 0x01
    13d8:	88 2f       	mov	r24, r24
    13da:	90 e0       	ldi	r25, 0x00	; 0

000013dc <.Loc.75>:
    13dc:	f9 01       	movw	r30, r18
    13de:	20 81       	ld	r18, Z

000013e0 <.Loc.76>:
    13e0:	87 5c       	subi	r24, 0xC7	; 199
    13e2:	9d 4f       	sbci	r25, 0xFD	; 253
    13e4:	fc 01       	movw	r30, r24
    13e6:	20 83       	st	Z, r18

000013e8 <.L15>:
        while(i)
    13e8:	89 81       	ldd	r24, Y+1	; 0x01
    13ea:	88 23       	and	r24, r24
    13ec:	51 f7       	brne	.-44     	; 0x13c2 <.L16>

000013ee <.Loc.78>:
        }
        UCSR0B |= (1<<UDRIE0);
    13ee:	81 ec       	ldi	r24, 0xC1	; 193
    13f0:	90 e0       	ldi	r25, 0x00	; 0
    13f2:	fc 01       	movw	r30, r24
    13f4:	20 81       	ld	r18, Z
    13f6:	81 ec       	ldi	r24, 0xC1	; 193
    13f8:	90 e0       	ldi	r25, 0x00	; 0

000013fa <.Loc.79>:
    13fa:	20 62       	ori	r18, 0x20	; 32
    13fc:	fc 01       	movw	r30, r24
    13fe:	20 83       	st	Z, r18

00001400 <.L17>:
    }
}
    1400:	00 00       	nop
    1402:	0f 90       	pop	r0
    1404:	0f 90       	pop	r0
    1406:	0f 90       	pop	r0
    1408:	df 91       	pop	r29
    140a:	cf 91       	pop	r28
    140c:	08 95       	ret

0000140e <__divmodhi4>:
    140e:	97 fb       	bst	r25, 7

00001410 <.Loc.1>:
    1410:	07 2e       	mov	r0, r23

00001412 <.Loc.2>:
    1412:	16 f4       	brtc	.+4      	; 0x1418 <.L^B1>

00001414 <.Loc.3>:
    1414:	00 94       	com	r0

00001416 <.Loc.4>:
    1416:	07 d0       	rcall	.+14     	; 0x1426 <__divmodhi4_neg1>

00001418 <.L^B1>:
    1418:	77 fd       	sbrc	r23, 7

0000141a <.Loc.6>:
    141a:	09 d0       	rcall	.+18     	; 0x142e <__divmodhi4_neg2>

0000141c <.Loc.7>:
    141c:	0e 94 30 0a 	call	0x1460	; 0x1460 <__udivmodhi4>

00001420 <.Loc.8>:
    1420:	07 fc       	sbrc	r0, 7

00001422 <.Loc.9>:
    1422:	05 d0       	rcall	.+10     	; 0x142e <__divmodhi4_neg2>

00001424 <.Loc.10>:
    1424:	3e f4       	brtc	.+14     	; 0x1434 <__divmodhi4_exit>

00001426 <__divmodhi4_neg1>:
    1426:	90 95       	com	r25

00001428 <.Loc.12>:
    1428:	81 95       	neg	r24

0000142a <.Loc.13>:
    142a:	9f 4f       	sbci	r25, 0xFF	; 255

0000142c <.Loc.14>:
    142c:	08 95       	ret

0000142e <__divmodhi4_neg2>:
    142e:	70 95       	com	r23

00001430 <.Loc.16>:
    1430:	61 95       	neg	r22

00001432 <.Loc.17>:
    1432:	7f 4f       	sbci	r23, 0xFF	; 255

00001434 <__divmodhi4_exit>:
    1434:	08 95       	ret

00001436 <__adddi3_s8>:
    1436:	00 24       	eor	r0, r0

00001438 <.Loc.1>:
    1438:	a7 fd       	sbrc	r26, 7

0000143a <.Loc.2>:
    143a:	00 94       	com	r0

0000143c <.Loc.3>:
    143c:	2a 0f       	add	r18, r26
    143e:	30 1d       	adc	r19, r0
    1440:	40 1d       	adc	r20, r0
    1442:	50 1d       	adc	r21, r0

00001444 <.Loc.4>:
    1444:	60 1d       	adc	r22, r0
    1446:	70 1d       	adc	r23, r0
    1448:	80 1d       	adc	r24, r0
    144a:	90 1d       	adc	r25, r0

0000144c <.Loc.5>:
    144c:	08 95       	ret

0000144e <__subdi3>:
    144e:	2a 19       	sub	r18, r10
    1450:	3b 09       	sbc	r19, r11
    1452:	4c 09       	sbc	r20, r12
    1454:	5d 09       	sbc	r21, r13

00001456 <.Loc.1>:
    1456:	6e 09       	sbc	r22, r14
    1458:	7f 09       	sbc	r23, r15
    145a:	80 0b       	sbc	r24, r16
    145c:	91 0b       	sbc	r25, r17

0000145e <.Loc.2>:
    145e:	08 95       	ret

00001460 <__udivmodhi4>:
    1460:	aa 1b       	sub	r26, r26

00001462 <.Loc.1>:
    1462:	bb 1b       	sub	r27, r27

00001464 <.Loc.2>:
    1464:	51 e1       	ldi	r21, 0x11	; 17

00001466 <.Loc.3>:
    1466:	07 c0       	rjmp	.+14     	; 0x1476 <__udivmodhi4_ep>

00001468 <__udivmodhi4_loop>:
    1468:	aa 1f       	adc	r26, r26

0000146a <.Loc.5>:
    146a:	bb 1f       	adc	r27, r27

0000146c <.Loc.6>:
    146c:	a6 17       	cp	r26, r22

0000146e <.Loc.7>:
    146e:	b7 07       	cpc	r27, r23

00001470 <.Loc.8>:
    1470:	10 f0       	brcs	.+4      	; 0x1476 <__udivmodhi4_ep>

00001472 <.Loc.9>:
    1472:	a6 1b       	sub	r26, r22

00001474 <.Loc.10>:
    1474:	b7 0b       	sbc	r27, r23

00001476 <__udivmodhi4_ep>:
    1476:	88 1f       	adc	r24, r24

00001478 <.Loc.12>:
    1478:	99 1f       	adc	r25, r25

0000147a <.Loc.13>:
    147a:	5a 95       	dec	r21

0000147c <.Loc.14>:
    147c:	a9 f7       	brne	.-22     	; 0x1468 <__udivmodhi4_loop>

0000147e <.Loc.15>:
    147e:	80 95       	com	r24

00001480 <.Loc.16>:
    1480:	90 95       	com	r25

00001482 <.Loc.17>:
    1482:	bc 01       	movw	r22, r24

00001484 <.Loc.18>:
    1484:	cd 01       	movw	r24, r26

00001486 <.Loc.19>:
    1486:	08 95       	ret

00001488 <__cmpsf2>:
    1488:	0e 94 78 0a 	call	0x14f0	; 0x14f0 <__fp_cmp>
    148c:	08 f4       	brcc	.+2      	; 0x1490 <.L1^B1>
    148e:	81 e0       	ldi	r24, 0x01	; 1

00001490 <.L1^B1>:
    1490:	08 95       	ret

00001492 <__fixunssfsi>:
    1492:	0e 94 a4 0a 	call	0x1548	; 0x1548 <__fp_splitA>
    1496:	88 f0       	brcs	.+34     	; 0x14ba <.L_err>
    1498:	9f 57       	subi	r25, 0x7F	; 127
    149a:	98 f0       	brcs	.+38     	; 0x14c2 <.L_zr>
    149c:	b9 2f       	mov	r27, r25
    149e:	99 27       	eor	r25, r25
    14a0:	b7 51       	subi	r27, 0x17	; 23
    14a2:	b0 f0       	brcs	.+44     	; 0x14d0 <.L4^B1>
    14a4:	e1 f0       	breq	.+56     	; 0x14de <.L_sign>

000014a6 <.L1^B1>:
    14a6:	66 0f       	add	r22, r22
    14a8:	77 1f       	adc	r23, r23
    14aa:	88 1f       	adc	r24, r24
    14ac:	99 1f       	adc	r25, r25
    14ae:	1a f0       	brmi	.+6      	; 0x14b6 <.L2^B1>
    14b0:	ba 95       	dec	r27
    14b2:	c9 f7       	brne	.-14     	; 0x14a6 <.L1^B1>
    14b4:	14 c0       	rjmp	.+40     	; 0x14de <.L_sign>

000014b6 <.L2^B1>:
    14b6:	b1 30       	cpi	r27, 0x01	; 1
    14b8:	91 f0       	breq	.+36     	; 0x14de <.L_sign>

000014ba <.L_err>:
    14ba:	0e 94 be 0a 	call	0x157c	; 0x157c <__fp_zero>
    14be:	b1 e0       	ldi	r27, 0x01	; 1
    14c0:	08 95       	ret

000014c2 <.L_zr>:
    14c2:	0c 94 be 0a 	jmp	0x157c	; 0x157c <__fp_zero>

000014c6 <.L3^B1>:
    14c6:	67 2f       	mov	r22, r23
    14c8:	78 2f       	mov	r23, r24
    14ca:	88 27       	eor	r24, r24
    14cc:	b8 5f       	subi	r27, 0xF8	; 248
    14ce:	39 f0       	breq	.+14     	; 0x14de <.L_sign>

000014d0 <.L4^B1>:
    14d0:	b9 3f       	cpi	r27, 0xF9	; 249
    14d2:	cc f3       	brlt	.-14     	; 0x14c6 <.L3^B1>

000014d4 <.L5^B1>:
    14d4:	86 95       	lsr	r24
    14d6:	77 95       	ror	r23
    14d8:	67 95       	ror	r22
    14da:	b3 95       	inc	r27
    14dc:	d9 f7       	brne	.-10     	; 0x14d4 <.L5^B1>

000014de <.L_sign>:
    14de:	3e f4       	brtc	.+14     	; 0x14ee <.L6^B1>
    14e0:	90 95       	com	r25
    14e2:	80 95       	com	r24
    14e4:	70 95       	com	r23
    14e6:	61 95       	neg	r22
    14e8:	7f 4f       	sbci	r23, 0xFF	; 255
    14ea:	8f 4f       	sbci	r24, 0xFF	; 255
    14ec:	9f 4f       	sbci	r25, 0xFF	; 255

000014ee <.L6^B1>:
    14ee:	08 95       	ret

000014f0 <__fp_cmp>:
    14f0:	99 0f       	add	r25, r25
    14f2:	00 08       	sbc	r0, r0
    14f4:	55 0f       	add	r21, r21
    14f6:	aa 0b       	sbc	r26, r26
    14f8:	e0 e8       	ldi	r30, 0x80	; 128
    14fa:	fe ef       	ldi	r31, 0xFE	; 254
    14fc:	16 16       	cp	r1, r22
    14fe:	17 06       	cpc	r1, r23
    1500:	e8 07       	cpc	r30, r24
    1502:	f9 07       	cpc	r31, r25
    1504:	c0 f0       	brcs	.+48     	; 0x1536 <.L9^B1>
    1506:	12 16       	cp	r1, r18
    1508:	13 06       	cpc	r1, r19
    150a:	e4 07       	cpc	r30, r20
    150c:	f5 07       	cpc	r31, r21
    150e:	98 f0       	brcs	.+38     	; 0x1536 <.L9^B1>
    1510:	62 1b       	sub	r22, r18
    1512:	73 0b       	sbc	r23, r19
    1514:	84 0b       	sbc	r24, r20
    1516:	95 0b       	sbc	r25, r21
    1518:	39 f4       	brne	.+14     	; 0x1528 <.L1^B1>
    151a:	0a 26       	eor	r0, r26
    151c:	61 f0       	breq	.+24     	; 0x1536 <.L9^B1>
    151e:	23 2b       	or	r18, r19
    1520:	24 2b       	or	r18, r20
    1522:	25 2b       	or	r18, r21
    1524:	21 f4       	brne	.+8      	; 0x152e <.L2^B1>
    1526:	08 95       	ret

00001528 <.L1^B1>:
    1528:	0a 26       	eor	r0, r26
    152a:	09 f4       	brne	.+2      	; 0x152e <.L2^B1>
    152c:	a1 40       	sbci	r26, 0x01	; 1

0000152e <.L2^B1>:
    152e:	a6 95       	lsr	r26
    1530:	8f ef       	ldi	r24, 0xFF	; 255
    1532:	81 1d       	adc	r24, r1
    1534:	81 1d       	adc	r24, r1

00001536 <.L9^B1>:
    1536:	08 95       	ret

00001538 <__fp_split3>:
    1538:	57 fd       	sbrc	r21, 7
    153a:	90 58       	subi	r25, 0x80	; 128
    153c:	44 0f       	add	r20, r20
    153e:	55 1f       	adc	r21, r21
    1540:	59 f0       	breq	.+22     	; 0x1558 <.L4^B1>
    1542:	5f 3f       	cpi	r21, 0xFF	; 255
    1544:	71 f0       	breq	.+28     	; 0x1562 <.L5^B1>

00001546 <.L1^B1>:
    1546:	47 95       	ror	r20

00001548 <__fp_splitA>:
    1548:	88 0f       	add	r24, r24
    154a:	97 fb       	bst	r25, 7
    154c:	99 1f       	adc	r25, r25
    154e:	61 f0       	breq	.+24     	; 0x1568 <.L6^B1>
    1550:	9f 3f       	cpi	r25, 0xFF	; 255
    1552:	79 f0       	breq	.+30     	; 0x1572 <.L7^B1>

00001554 <.L3^B1>:
    1554:	87 95       	ror	r24
    1556:	08 95       	ret

00001558 <.L4^B1>:
    1558:	12 16       	cp	r1, r18
    155a:	13 06       	cpc	r1, r19
    155c:	14 06       	cpc	r1, r20
    155e:	55 1f       	adc	r21, r21
    1560:	f2 cf       	rjmp	.-28     	; 0x1546 <.L1^B1>

00001562 <.L5^B1>:
    1562:	46 95       	lsr	r20
    1564:	f1 df       	rcall	.-30     	; 0x1548 <__fp_splitA>
    1566:	08 c0       	rjmp	.+16     	; 0x1578 <.L8^B1>

00001568 <.L6^B1>:
    1568:	16 16       	cp	r1, r22
    156a:	17 06       	cpc	r1, r23
    156c:	18 06       	cpc	r1, r24
    156e:	99 1f       	adc	r25, r25
    1570:	f1 cf       	rjmp	.-30     	; 0x1554 <.L3^B1>

00001572 <.L7^B1>:
    1572:	86 95       	lsr	r24
    1574:	71 05       	cpc	r23, r1
    1576:	61 05       	cpc	r22, r1

00001578 <.L8^B1>:
    1578:	08 94       	sec
    157a:	08 95       	ret

0000157c <__fp_zero>:
    157c:	e8 94       	clt

0000157e <__fp_szero>:
    157e:	bb 27       	eor	r27, r27
    1580:	66 27       	eor	r22, r22
    1582:	77 27       	eor	r23, r23
    1584:	cb 01       	movw	r24, r22
    1586:	97 f9       	bld	r25, 7
    1588:	08 95       	ret

0000158a <__gesf2>:
    158a:	0e 94 78 0a 	call	0x14f0	; 0x14f0 <__fp_cmp>
    158e:	08 f4       	brcc	.+2      	; 0x1592 <.L1^B1>
    1590:	8f ef       	ldi	r24, 0xFF	; 255

00001592 <.L1^B1>:
    1592:	08 95       	ret

00001594 <__mulsf3>:
    1594:	0e 94 dd 0a 	call	0x15ba	; 0x15ba <__mulsf3x>
    1598:	0c 94 4e 0b 	jmp	0x169c	; 0x169c <__fp_round>

0000159c <.L^B1>:
    159c:	0e 94 40 0b 	call	0x1680	; 0x1680 <__fp_pscA>
    15a0:	38 f0       	brcs	.+14     	; 0x15b0 <.L1^B1>
    15a2:	0e 94 47 0b 	call	0x168e	; 0x168e <__fp_pscB>
    15a6:	20 f0       	brcs	.+8      	; 0x15b0 <.L1^B1>
    15a8:	95 23       	and	r25, r21
    15aa:	11 f0       	breq	.+4      	; 0x15b0 <.L1^B1>
    15ac:	0c 94 37 0b 	jmp	0x166e	; 0x166e <__fp_inf>

000015b0 <.L1^B1>:
    15b0:	0c 94 3d 0b 	jmp	0x167a	; 0x167a <__fp_nan>

000015b4 <.L2^B1>:
    15b4:	11 24       	eor	r1, r1
    15b6:	0c 94 bf 0a 	jmp	0x157e	; 0x157e <__fp_szero>

000015ba <__mulsf3x>:
    15ba:	0e 94 9c 0a 	call	0x1538	; 0x1538 <__fp_split3>
    15be:	70 f3       	brcs	.-36     	; 0x159c <.L^B1>

000015c0 <__mulsf3_pse>:
    15c0:	95 9f       	mul	r25, r21
    15c2:	c1 f3       	breq	.-16     	; 0x15b4 <.L2^B1>
    15c4:	95 0f       	add	r25, r21
    15c6:	50 e0       	ldi	r21, 0x00	; 0
    15c8:	55 1f       	adc	r21, r21
    15ca:	62 9f       	mul	r22, r18
    15cc:	f0 01       	movw	r30, r0
    15ce:	72 9f       	mul	r23, r18
    15d0:	bb 27       	eor	r27, r27
    15d2:	f0 0d       	add	r31, r0
    15d4:	b1 1d       	adc	r27, r1
    15d6:	63 9f       	mul	r22, r19
    15d8:	aa 27       	eor	r26, r26
    15da:	f0 0d       	add	r31, r0
    15dc:	b1 1d       	adc	r27, r1
    15de:	aa 1f       	adc	r26, r26
    15e0:	64 9f       	mul	r22, r20
    15e2:	66 27       	eor	r22, r22
    15e4:	b0 0d       	add	r27, r0
    15e6:	a1 1d       	adc	r26, r1
    15e8:	66 1f       	adc	r22, r22
    15ea:	82 9f       	mul	r24, r18
    15ec:	22 27       	eor	r18, r18
    15ee:	b0 0d       	add	r27, r0
    15f0:	a1 1d       	adc	r26, r1
    15f2:	62 1f       	adc	r22, r18
    15f4:	73 9f       	mul	r23, r19
    15f6:	b0 0d       	add	r27, r0
    15f8:	a1 1d       	adc	r26, r1
    15fa:	62 1f       	adc	r22, r18
    15fc:	83 9f       	mul	r24, r19
    15fe:	a0 0d       	add	r26, r0
    1600:	61 1d       	adc	r22, r1
    1602:	22 1f       	adc	r18, r18
    1604:	74 9f       	mul	r23, r20
    1606:	33 27       	eor	r19, r19
    1608:	a0 0d       	add	r26, r0
    160a:	61 1d       	adc	r22, r1
    160c:	23 1f       	adc	r18, r19
    160e:	84 9f       	mul	r24, r20
    1610:	60 0d       	add	r22, r0
    1612:	21 1d       	adc	r18, r1
    1614:	82 2f       	mov	r24, r18
    1616:	76 2f       	mov	r23, r22
    1618:	6a 2f       	mov	r22, r26
    161a:	11 24       	eor	r1, r1
    161c:	9f 57       	subi	r25, 0x7F	; 127
    161e:	50 40       	sbci	r21, 0x00	; 0
    1620:	9a f0       	brmi	.+38     	; 0x1648 <.L13^B1>
    1622:	f1 f0       	breq	.+60     	; 0x1660 <.L15^B1>

00001624 <.L10^B1>:
    1624:	88 23       	and	r24, r24
    1626:	4a f0       	brmi	.+18     	; 0x163a <.L11^B1>
    1628:	ee 0f       	add	r30, r30
    162a:	ff 1f       	adc	r31, r31
    162c:	bb 1f       	adc	r27, r27
    162e:	66 1f       	adc	r22, r22
    1630:	77 1f       	adc	r23, r23
    1632:	88 1f       	adc	r24, r24
    1634:	91 50       	subi	r25, 0x01	; 1
    1636:	50 40       	sbci	r21, 0x00	; 0
    1638:	a9 f7       	brne	.-22     	; 0x1624 <.L10^B1>

0000163a <.L11^B1>:
    163a:	9e 3f       	cpi	r25, 0xFE	; 254
    163c:	51 05       	cpc	r21, r1
    163e:	80 f0       	brcs	.+32     	; 0x1660 <.L15^B1>
    1640:	0c 94 37 0b 	jmp	0x166e	; 0x166e <__fp_inf>

00001644 <.L12^B1>:
    1644:	0c 94 bf 0a 	jmp	0x157e	; 0x157e <__fp_szero>

00001648 <.L13^B1>:
    1648:	5f 3f       	cpi	r21, 0xFF	; 255
    164a:	e4 f3       	brlt	.-8      	; 0x1644 <.L12^B1>
    164c:	98 3e       	cpi	r25, 0xE8	; 232
    164e:	d4 f3       	brlt	.-12     	; 0x1644 <.L12^B1>

00001650 <.L14^B1>:
    1650:	86 95       	lsr	r24
    1652:	77 95       	ror	r23
    1654:	67 95       	ror	r22
    1656:	b7 95       	ror	r27
    1658:	f7 95       	ror	r31
    165a:	e7 95       	ror	r30
    165c:	9f 5f       	subi	r25, 0xFF	; 255
    165e:	c1 f7       	brne	.-16     	; 0x1650 <.L14^B1>

00001660 <.L15^B1>:
    1660:	fe 2b       	or	r31, r30
    1662:	88 0f       	add	r24, r24
    1664:	91 1d       	adc	r25, r1
    1666:	96 95       	lsr	r25
    1668:	87 95       	ror	r24
    166a:	97 f9       	bld	r25, 7
    166c:	08 95       	ret

0000166e <__fp_inf>:
    166e:	97 f9       	bld	r25, 7
    1670:	9f 67       	ori	r25, 0x7F	; 127
    1672:	80 e8       	ldi	r24, 0x80	; 128
    1674:	70 e0       	ldi	r23, 0x00	; 0
    1676:	60 e0       	ldi	r22, 0x00	; 0
    1678:	08 95       	ret

0000167a <__fp_nan>:
    167a:	9f ef       	ldi	r25, 0xFF	; 255
    167c:	80 ec       	ldi	r24, 0xC0	; 192
    167e:	08 95       	ret

00001680 <__fp_pscA>:
    1680:	00 24       	eor	r0, r0
    1682:	0a 94       	dec	r0
    1684:	16 16       	cp	r1, r22
    1686:	17 06       	cpc	r1, r23
    1688:	18 06       	cpc	r1, r24
    168a:	09 06       	cpc	r0, r25
    168c:	08 95       	ret

0000168e <__fp_pscB>:
    168e:	00 24       	eor	r0, r0
    1690:	0a 94       	dec	r0
    1692:	12 16       	cp	r1, r18
    1694:	13 06       	cpc	r1, r19
    1696:	14 06       	cpc	r1, r20
    1698:	05 06       	cpc	r0, r21
    169a:	08 95       	ret

0000169c <__fp_round>:
    169c:	09 2e       	mov	r0, r25
    169e:	03 94       	inc	r0
    16a0:	00 0c       	add	r0, r0
    16a2:	11 f4       	brne	.+4      	; 0x16a8 <.L1^B1>
    16a4:	88 23       	and	r24, r24
    16a6:	52 f0       	brmi	.+20     	; 0x16bc <.L3^B1>

000016a8 <.L1^B1>:
    16a8:	bb 0f       	add	r27, r27
    16aa:	40 f4       	brcc	.+16     	; 0x16bc <.L3^B1>
    16ac:	bf 2b       	or	r27, r31
    16ae:	11 f4       	brne	.+4      	; 0x16b4 <.L2^B1>
    16b0:	60 ff       	sbrs	r22, 0
    16b2:	04 c0       	rjmp	.+8      	; 0x16bc <.L3^B1>

000016b4 <.L2^B1>:
    16b4:	6f 5f       	subi	r22, 0xFF	; 255
    16b6:	7f 4f       	sbci	r23, 0xFF	; 255
    16b8:	8f 4f       	sbci	r24, 0xFF	; 255
    16ba:	9f 4f       	sbci	r25, 0xFF	; 255

000016bc <.L3^B1>:
    16bc:	08 95       	ret

000016be <_exit>:
    16be:	f8 94       	cli

000016c0 <__stop_program>:
    16c0:	ff cf       	rjmp	.-2      	; 0x16c0 <__stop_program>
